<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>唐巧的博客</title>
  <subtitle>记录下自己学习的点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.devtang.com/"/>
  <updated>2017-03-04T17:56:42.000Z</updated>
  <id>http://blog.devtang.com/</id>
  
  <author>
    <name>唐巧</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何请教别人</title>
    <link href="http://blog.devtang.com/2017/03/05/how-to-get-help/"/>
    <id>http://blog.devtang.com/2017/03/05/how-to-get-help/</id>
    <published>2017-03-04T16:54:28.000Z</published>
    <updated>2017-03-04T17:56:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>我多多少少在 iOS 圈子里面有一点点知名度，所以在微博、微信、公众号上找我问问题的人不少。但是，大部分的程序员都不懂得如何请教别人，其实这件事情只需要学会「换位思考」就会好很多，但是还是有人做不好。</p>
<p>这篇文章主要是写给我自己用的，以后再遇到不会提问题的人，我就贴给他这篇文章就可以了。</p>
<p>如何请教别人呢，要做到以下几点。</p>
<h2 id="合适的自我介绍"><a href="#合适的自我介绍" class="headerlink" title="合适的自我介绍"></a>合适的自我介绍</h2><p>上次有一个人在一个线下分享会后一直拉着我问问题，我一直忍着没有问他是谁，后来问了太多，我实在受不了了，我问他：你是谁呀，为什么好像和我很熟的样子？他说：哦，我是一个 iOS 开发，你没必要记住我的名字。</p>
<p>类似的情形出现过多次，还有一些人把名字故意取成很个性的，完全无法记住的 emoji 表情或者符号，也不做自我介绍，我完全无法记住这些人。</p>
<p>合适的自我介绍为什么重要呢？因为它代表着一种尊重和平等。我义务解答问题没有关系，但是我即使完全不求回报，也希望我到底帮助的是谁。这个提问者的名字，毕业学校，工作单位，以及他的问题，都会给我带来记忆。</p>
<p>这其实是基本的礼仪，看看那些著名演讲或者发布会的提问环节吧，提问者都会先自我介绍一番。</p>
<h2 id="在吗？"><a href="#在吗？" class="headerlink" title="在吗？"></a>在吗？</h2><p>「在吗」，基本上以这种方式和我打招呼的提问者，通常都是令我感受非常差的。因为这意味着：我看到了必须回答在，我回答在了之后，还必须立即响应他后续的问题。</p>
<p>同学们，现在连 QQ 都取消在线状态了，有什么事情不能用留言的方式解决呢？说白了，还不是提问者自我为中心，他们希望偷懒，连在请教别人这件事情上，他们都希望不要浪费自己的打字 —- 如果对方不在，我就可以不用打字提问题了，免得提了别人不答。</p>
<p>但是，如果你这么不尊重对方的时间，又何来让对方免费的、在线互动地和你一问一答帮助你解决你的问题？</p>
<p>凭什么？</p>
<h2 id="不会提问"><a href="#不会提问" class="headerlink" title="不会提问"></a>不会提问</h2><p>很多人都描述不清楚自己的问题，需要我来帮助他们一点点来弄清楚他到底想问什么。我举一个例子：</p>
<p>上次一个人在群里面问：有谁知道怎么更新 Mac 的 Numbers 吗？我以为他是一个 Mac 新手，于是我说：打开 Mac 的 App Store 应用，在 Updates 里面找到 Numbers，然后点 “update” 按钮。</p>
<p>结果他说：我知道，但是我为什么点了没有反应呢？我这个时候才发现，他其实是想问为什么 App Store 响应慢。于是我推荐他设置了一些加速下载的 DNS。</p>
<p>因为这个人我认识，所以我继续在帮助他。但是其实他给了我相当糟糕的体验。因为我在帮助他的时候，我在努力把解决方案说清楚，但是他懒得连问题都不想说清楚。或者，他认为只要他说「不会更新某个应用」，就表示的是 AppStore 卡顿，而不是别的意思。</p>
<h2 id="提傻问题"><a href="#提傻问题" class="headerlink" title="提傻问题"></a>提傻问题</h2><p>对于 iOS 开发者来说，向我提的最傻的两类问题是：审核问题和具体的 API 问题。</p>
<p>例如：</p>
<blockquote>
<p>唐老师，麻烦看看：<br>Your app uses public APIs in an unapproved manner, which does not comply with section 3.3.1 of the Apple Developer Program License Agreement.</p>
<p>Specifically, your app was found to use “canOpenURL:” to scan for an arbitrarily large list of apps. Use of this method for generalized app detection is not appropriate.</p>
<p>Since there is no accurate way of predicting how an API may be modified and what effects those modifications may have, Apple does not permit unapproved uses of public APIs in App Store apps.</p>
</blockquote>
<p>审核的问题大部分情况下英文的审核意见已经说得非常清楚了，我实在没有什么动力做翻译。</p>
<p>另外如果是问 iOS 开发某个特定细节 API 的使用问题，其实是没有哪个人能够对苹果的所有 API 都了解得那么清楚的，与其问我，还不如用 Google 搜索或者查文档更好。</p>
<h2 id="扔代码"><a href="#扔代码" class="headerlink" title="扔代码"></a>扔代码</h2><p>上来就扔一段代码，然后说：照着你的博客写的，为什么出问题了呢？好象我写了免费的博客，就有义务帮他找 Bug 一样。</p>
<p>当然，扔代码的还算好的，还有扔过来一个 GitHub 工程的，说：「麻烦帮忙看看」，这真的是要让我吐血。。。</p>
<h2 id="情绪方面的问题"><a href="#情绪方面的问题" class="headerlink" title="情绪方面的问题"></a>情绪方面的问题</h2><p>巧哥，我 iOS 找不到工作怎么办？</p>
<p>巧哥，我希望从 xx 方向换到 iOS 方向，你怎么看？</p>
<p>巧哥，我的老大对我很差，你说我应不应该换一份工作？</p>
<p>大部分这些问题，我其实也只能说：努力努力再努力，或者选择沉默。因为我确实也帮不上什么忙。如果需要找人安抚心情的话，找好朋友可能更适合。</p>
<h2 id="不会感谢"><a href="#不会感谢" class="headerlink" title="不会感谢"></a>不会感谢</h2><p>说句谢谢是最最基本的。</p>
<p>如果你的问题花费了别人大量的时间，例如几个小时或者一天，那么请别人吃个饭也是正常的。大家都是成年人，倒不是说要多功利，这仅是相互的尊重。</p>
<p>我现在如果有很困扰的问题要请教别人，简单几句能说清楚的，我会给别人微信留言说清楚，然后附一个 66 元的红包。简单几句说不清楚的，我会和别人约个时间当面请教，然后顺便请别人吃顿饭。外地的朋友，实在不知道如何感谢，我会说：希望以后如果需要我的时候，能够找我提供帮助。</p>
<h2 id="我的困境"><a href="#我的困境" class="headerlink" title="我的困境"></a>我的困境</h2><p>最后分享一下我的困境。</p>
<p>我每天收到几十个求助的问题，但是我精力非常有限，对于我来说时间优先级肯定是：首先完成工作上的事情、然后完成家里的事情、然后是娱乐和学习、然后是和朋友聊天交流、然后是休息，如果上面这些做完了，偶尔有精力，正好遇上了会提问，提的问题又是经过深入思考，而恰好我又知道答案，答案又恰好不会花费特别多的时间，那么我才有可能回答。</p>
<p>当然，如果是朋友的问题，我会把这个看作我处理社交关系的一件事情，那我可能就会放弃一些休息或学习时间来帮助朋友，因为或许有一天我也会需要朋友的帮助，同时朋友的成功也会给我带来开心。</p>
<p>希望这篇文章能够教会大家这个简单的「换位思考」法则。</p>
<p>谢谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我多多少少在 iOS 圈子里面有一点点知名度，所以在微博、微信、公众号上找我问问题的人不少。但是，大部分的程序员都不懂得如何请教别人，其实这件事情只需要学会「换位思考」就会好很多，但是还是有人做不好。&lt;/p&gt;
&lt;p&gt;这篇文章主要是写给我自己用的，以后再遇到不会提问题的人，我
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《管理的实践》读书心得</title>
    <link href="http://blog.devtang.com/2017/02/23/the-practice-of-management-by-drucker/"/>
    <id>http://blog.devtang.com/2017/02/23/the-practice-of-management-by-drucker/</id>
    <published>2017-02-23T14:32:26.000Z</published>
    <updated>2017-02-27T13:19:12.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/the-practice-of-management.jpg">
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近读完了<a href="https://item.jd.com/10059510.html" target="_blank" rel="external">《管理的实践》</a>，这是我读的<a href="https://zh.wikipedia.org/wiki/%E5%BD%BC%E5%BE%97%C2%B7%E5%BE%B7%E9%B2%81%E5%85%8B" target="_blank" rel="external">德鲁克</a>的第一本书，这是一本偏综述型的书，比较多的内容是偏笼统的，不过对我来说还是挺有帮助的。</p>
<p>刚刚说了，这是一本偏综述型的书，作者在别的书中，将本书的一些观点进行了细化讨论：</p>
<ul>
<li>《成果管理》（Managing for Results, 1964）是第一本有关企业战略的书籍。</li>
<li>《卓有成效的管理者》（The Effective Executive, 1966）讨论组织中的管理者如何自我管理。</li>
<li>《管理：使命，责任，实务》（Management:Tasks, Responsibilities, Practices, 1973）则是为实际管理工作者所撰写的系统化手册，也是研读管理学的学生的系统化教科书，因此内容尽可能翔实完整，有别于本书容易理解、重启发性的特色。</li>
<li>《动荡时代的管理策略》（Managing in Turbulent Times, 1980）进一步探讨了本书提出的基本问题：我们的事业是什么？我们的事业将是什么？我们的事业究竟应该是什么？但同时也探讨了在动荡时代，企业如何兼顾创新与延续，化变动为契机。</li>
</ul>
<h3 id="第一部分：管理企业"><a href="#第一部分：管理企业" class="headerlink" title="第一部分：管理企业"></a>第一部分：管理企业</h3><p>德鲁克从他的角度介绍了：</p>
<ul>
<li>管理层的主要职责：管理企业、管理管理者、管理员工与工作。</li>
<li>企业的目的：创造顾客。我理解这表达的意思就是解决用户未被满足的需求或痛点。</li>
<li>企业的主要功能：营销和创新。</li>
<li>一些决策分析基础。基本要素分析试图探究未来的事件「为什么」会发生，趋势分析问的问题则是：「有多大的可能」和会「多快」发生。</li>
</ul>
<p>这部分介绍的内容原则简单，实操则极难，算是一个引言章节，便于后面的部分做展开。</p>
<h3 id="第二部分：管理管理者"><a href="#第二部分：管理管理者" class="headerlink" title="第二部分：管理管理者"></a>第二部分：管理管理者</h3><p>这部分先用福特公司的例子，来说明缺乏管理者是福特衰败的主因，老福特失败的根本原因在于，他在经营10亿美元的庞大事业时，有系统且刻意地排除管理者的角色。而福特二世采取了目标管理，将很多决策权下放，最终扭转了福特公司的衰败。</p>
<p>然后德鲁克用比较大的篇幅介绍了「目标管理与自我控制」。这一章非常有用。在这一章节中，德鲁克首先介绍了容易误导管理者的重要因素：</p>
<ol>
<li>管理者的专业工作</li>
<li>管理的层级结构</li>
<li>愿景和工作上的差异，导致各级管理者之间产生隔阂</li>
</ol>
<p>这里面，石匠的例子举得恰到好处：</p>
<blockquote>
<p>本书中举的例子很有参考价值：在企业管理会议上，大家很喜欢谈的故事是：有人问三个石匠他们在做什么。第一个石匠回答：“我在养家糊口。”第二个石匠边敲边回答：“我在做全国最好的石匠活。”第三个石匠仰望天空，目光炯炯有神，说道：“我在建造一座大教堂。”<br>当然，第三个石匠才是真正的“管理者”。第一个石匠知道他想从工作中得到什么，而且也设法达到目标。他或许能“以一天的劳力换取合理的报酬”，但他不是个管理者，也永远不会成为管理者。</p>
<p>麻烦的是第二个石匠。工作技艺很重要，没有技艺，任何工作都不可能获得生机。事实上，如果组织不要求成员展现他们最大的本领，员工必定士气低落，但太强调个人技艺，总是隐藏了一个危险。真正的工匠或真正的专业人士，常常自以为有成就，其实他们只不过在磨亮石头或帮忙打杂罢了。企业应该鼓励员工精益求精，但是专精的技艺必须和企业整体需求相关。</p>
</blockquote>
<p>对于程序员来说，只关注于代码的优雅，而不关注于产品的按时上线，就是过于关注专业工作了。我身边有大量这样的例子存在，每个人都关注自己的专业性工作，这样从表面上看是对的，但是却丧失了企业的目标。</p>
<p>所以，确定目标对于管理者来说是非常重要的，因为管理者才能将这样的目标向下进行传达。书中提出了一种简单的方法：给上司写信。列明：自己的工作目标，自己应该达到哪些绩效，需要做哪些事情，这些事情的主要障碍，公司提供哪些东西会形成助力或阻力。最终，这个会用于指导管理者工作的重要章程。</p>
<p>过度地使用流程和规范会使得效果适得其反。如果管理者大部分精力都花在做 PPT，并且 PPT 的质量很大程度决定了他的绩效，那么就会形成坏风气。</p>
<p>每位管理者主要的任务：1、完成上级的目标。2、完成对企业的责任。3、协助下属的工作。</p>
<p>企业必须通过五方面的实践，才能确保正确的精神贯彻于整个管理组织中：</p>
<ol>
<li>必须建立很高的绩效标准，不能宽容差的或平庸的表现，而且必须根据绩效，给予奖励。</li>
<li>每个管理职位本身必须有其价值，而不只是升迁的踏板。</li>
<li>必须建立合理而公平的升迁制度。</li>
<li>管理章程中必须清楚说明谁有权制定事关管理者命运的重要决定，管理者必须有向高层申诉的途径。</li>
<li>在任命管理者的时候，必须很清楚诚实正直的品格是对管理者的绝对要求，是管理者原本就需具备的特质，不能期待他升上管理职位后才开始培养这种特质。</li>
</ol>
<p>评估必须基于绩效。最大的错误是试图根据缺点来做评估。</p>
<p>在培养管理者上，德鲁克认为不应该因人设事。</p>
<h3 id="第三部分-管理的结构"><a href="#第三部分-管理的结构" class="headerlink" title="第三部分 管理的结构"></a>第三部分 管理的结构</h3><p>这一部分讨论了职能部门和业务部门如何组织更为合适。德鲁克还是非常希望建立以产品为中心的业务部门，在他的文章中，他把这个叫做“联邦分权制”的结构。他举了很多例子来说明按业务部门来划分组织结构的优越性，以下是一些摘要：</p>
<blockquote>
<p>根据需要而形成的职能性组织把重心放在专业技能上，员工必须获得相关的知识和能力。然而职能性专家的愿景、技能和忠诚对象可能因此变得太过狭隘，以至于他们完全不适合担任总经理的职位。</p>
<p>如果员工认为会计部门的主管掌握了他能否升迁的大权，那么他就会重视自己在“专业会计工作”上的表现甚于对公司的贡献，把更多精力投注于会计部门的扩展上，而非努力促进公司成长。</p>
<p>换句话说，多样化的做法反而强化了一致的目标和信念，而这正是建立共同的公民意识所不可或缺的。只有当其他单位会直接受到影响时，才需要一致的做法。但是，却必须建立一致的原则，并且明确说明，严格遵守。</p>
</blockquote>
<p>在互联网公司中，挺多大公司在这方面确实更喜欢采用职能部门的模式来做产品。他们有专门的PM部门，有专门的服务器开发部门，有专门的测试部门，有专门的设计部门。这些职能部门的人很容易产生只关注自己专业能力，而不关心产品（或公司利益）的行为。</p>
<h3 id="第四部分-管理员工和工作"><a href="#第四部分-管理员工和工作" class="headerlink" title="第四部分 管理员工和工作"></a>第四部分 管理员工和工作</h3><p>在人员管理上，德鲁克认为应该给员工很高的绩效责任，并且根据绩效责任来建立相应的奖励。但是，企业不应该要求员工对企业绝对忠诚，就好像企业承诺对员工负起百分之百的责任一样，都是不对的。</p>
<p>在人事管理上，德鲁克整体上是反对成立专门的人事部门的。他的核心观点是：绩效这件事情应该交由主管来做，但是如果人事部门只是做一些辅助性工作的话，又太过于简单。德鲁克肯定了人事管理中的人际关系和科学管理理论。但是认为这些收益远远不足支撑起构建起整个人事管理部门。</p>
<p>德鲁克认为：机械式的工作是反人性的，每个人都需要在工作中找到成就感，即便是机械的工作，加入一些需要判断的事情，都会让人觉得有成就感得多。</p>
<p>我们无法用金钱买到责任感。金钱上的奖赏和诱因当然很重要，但大半只会带来反效果。对奖金不满会变成负面的工作诱因，削弱员工对绩效的责任感。</p>
<h3 id="第五部分-当一名管理者意味着什么"><a href="#第五部分-当一名管理者意味着什么" class="headerlink" title="第五部分 当一名管理者意味着什么"></a>第五部分 当一名管理者意味着什么</h3><p>管理者的工作中包含了五项基本活动，这五项活动共同将所有资源整合成生气蓬勃、不断成长的组织。总结起来：设定目标，组织协调，激励员工，绩效评估，培养人才。</p>
<p>德鲁克强调对于管理者的通才教育，以培养他全面的能力。</p>
<p>在决策方面，德鲁克强调在不完整信息下做决策。他的原话是：</p>
<blockquote>
<p>管理者永远都不可能获得所有应该掌握到的事实。大多数决策的基础都是不完整的知识──原因可能是无法获得所需信息，或要掌握完整信息需要花太多的时间和太高的成本。我们不需要掌握所有事实之后，才能有好的决策；但是我们必须了解还欠缺哪些信息，由此判断决策的风险有多大，以及当建议采取某个行动方案时，其严谨度和准确度有多高。</p>
</blockquote>
<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p>本书的观点涉及的话题很广，所以思维导图我整理得很复杂，放在这里供大家参考：<a href="http://wx1.sinaimg.cn/large/65dc76a3ly1fd0sey03d1j215d8oykjn.jpg" target="_blank" rel="external">《管理的实践》思维导图</a>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实我在工作中的很多思考，都从德鲁克的这本书中都得到了一些启发。例如对于职能部门的思考一直困惑着我，在本书中，我看到了以业务部门为核心的联邦制架构的诸多优点，帮助我把这个道理想得更清楚了。又比如那个石匠的故事，用非常形象的方式让大家理解到什么样的工作方式更好。</p>
<p>还有一些小的道理，比如不能基于别人的缺点评估，比如因人设事，这些错误我都曾经犯过或见到别人犯过。一些实践，比如给上司写信，确实帮助我更好地理解了未来的工作目标。</p>
<p>这是一本好书，推荐给大家。</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/the-practice-of-management.jpg&quot;&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;最近读完了&lt;a href=&quot;https
    
    </summary>
    
      <category term="books summary" scheme="http://blog.devtang.com/categories/books-summary/"/>
    
    
      <category term="books" scheme="http://blog.devtang.com/tags/books/"/>
    
  </entry>
  
  <entry>
    <title>独立思考的重要性</title>
    <link href="http://blog.devtang.com/2017/02/19/the-important-of-indepentent-thinking/"/>
    <id>http://blog.devtang.com/2017/02/19/the-important-of-indepentent-thinking/</id>
    <published>2017-02-19T14:43:30.000Z</published>
    <updated>2017-02-19T15:23:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="罗辑思维的「逻辑」问题"><a href="#罗辑思维的「逻辑」问题" class="headerlink" title="罗辑思维的「逻辑」问题"></a>罗辑思维的「逻辑」问题</h2><p>我有一段时间很不喜欢罗辑思维，因为我发现他为了证明一个观点，会举一些非常不恰当的例子。而很多例子是可以从多方面来解读的，就像同样一本圣经，却可以成为多个宗教的教义一样。</p>
<p>昨天在微博上看到 @一乐 发了一篇<a href="http://m.weibo.cn/1819367693/4076303230983269" target="_blank" rel="external">微博</a>：</p>
<blockquote>
<p>（产品设计）是一个擅长辩论的行业，而在那些雾里看花也没有直观感受的领域，怎么说都有道理，谁都别想说服谁。</p>
</blockquote>
<p>一乐很恰当地说明了这种尴尬的现象。当我们作为程序员写代码的时候，一切都是确定的。但是在非编程领域，包括商业思考，产品设计，UI 设计，营销思路，竞争思路，很难有绝对的对错。</p>
<h2 id="讲故事时必须有明确的观点"><a href="#讲故事时必须有明确的观点" class="headerlink" title="讲故事时必须有明确的观点"></a>讲故事时必须有明确的观点</h2><p>刚刚说我不喜欢罗辑思维拿一些故事来生硬地证明他的观点。但是，我又还是继续在听罗辑思维。为什么呢？因为当我们在讲故事或者阐述观点的时候，我们必须给听众一个确定的内容，这个确定的内容就是一个明确的观点。</p>
<p>我还记得我发表过一篇 <a href="/2016/07/20/from-newbie-to-master/">《成长为 iOS 大 V 的秘密》</a>的文章。一位读者看完后回复得非常切中要害，他说我在文章中故意弱化了我的天赋，而强化了努力和坚持的效果。</p>
<p>我觉得他说得非常对。我在文章中说我毕业于一个计算机排名全国 100 名以外的学校，但是我也可以说我毕业于一个综合排名前 10 的 985 学校，并且我在这个学校的计算机专业成绩排名优秀并保送该校研究生。我可以说我自学 iOS 成才，但是也可以说我在网易时，可以下载有道词典和有道笔记的 iOS 代码资源学习，以及有大量优秀的同事可以帮助我解答自学中的疑问。</p>
<p>那么，我如果这么写文章，大家看了会怎么想呢？文章到底表达了什么观点呢？我其实觉得努力，机遇，天赋都很重要，但是如果要说到底什么是最重要的，我还是觉得是努力。所以我弱化了我的天赋和机遇，强化了努力的作用，以便传达出文章的核心思想。</p>
<p>罗辑思维也是这样，不管他讲什么例子，他都是在用故事试图证明他的观点。也许故事并不太恰当，但是观点本身其实就不是绝对正确的。所以只要把罗胖的观点放在地上思考这个观点的可取之处就可以了，危险的是那些把他的观点捧着举着的人。</p>
<p>这就是为什么张小龙会说「我说的都是错的」，小道消息的冯大辉也会说 「希望文章能给大家启发就好」。时代在变，我们不缺观点，缺的是一种辩证看问题，独立思考的态度。</p>
<h2 id="如何独立思考"><a href="#如何独立思考" class="headerlink" title="如何独立思考"></a>如何独立思考</h2><p>要独立思考，首先要学会吸收不同的观点。在这方面，多读书是最好的方式。书读多了，你自然就会发现不同的书中的观点会有冲突，这就给了你思考的基础。有了这个，你再去思考两种观点最最基本的假设，检查逻辑推导的过程，这样就容易找到对的一方了。</p>
<p>一旦你多次进行独立思考，你就会有意识地「怀疑」一些观点，然后利用自己的已有知识或者进行适当地网上搜索学习，你就可以验证自己的怀疑是否正确，从进培养起自己独立思考的能力。</p>
<p>如果打个比方，那么独立思考就是把别人嚼碎的食物还原，自己嚼一遍，因为只有自己嚼一遍，才能知道口感是不是真的好。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>我们选罗辑思维第 200 期《古典：超级个体》中的一个观点来挑战一下。这一期不是罗胖主持的，按理说应该挑罗胖自己讲的内容，但是我确实没有动机专门挑他的毛病，所以只能凭印象找最近的一期。这期节目中讲到，人以后的寿命变长，会使得婚姻很容易破裂。而他的理由是：夫妻之间婚姻的稳固，大多数是由于年轻的时候需要共同抚养孩子，年老之后不再好重新找伴侣只好将就过。</p>
<p>但是我正好看了《少有人走的路》这一本书，这里面提到了正确的婚姻价值观。所以，这一期节目中的这个例子，在很多家庭中应该是对的，但是这仅表示这些家庭成员缺少正确的对待婚姻的态度。有了这样的思考，我其实看待这个观点就更加成熟了。</p>
<p>我们生活中类似的需要独立思考的观点还有很多，大家都可以想一下，比如：</p>
<ul>
<li>今日头条真的只是一个「新闻客户端」吗？</li>
<li>为什么很多大公司继续使用 Objective-C，不用 Swift？</li>
</ul>
<p>这个时代人云亦云最可怕了，希望大家都能够有独立思考的能力。</p>
<p>与君共勉。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;罗辑思维的「逻辑」问题&quot;&gt;&lt;a href=&quot;#罗辑思维的「逻辑」问题&quot; class=&quot;headerlink&quot; title=&quot;罗辑思维的「逻辑」问题&quot;&gt;&lt;/a&gt;罗辑思维的「逻辑」问题&lt;/h2&gt;&lt;p&gt;我有一段时间很不喜欢罗辑思维，因为我发现他为了证明一个观点，会举一些
    
    </summary>
    
      <category term="summary" scheme="http://blog.devtang.com/categories/summary/"/>
    
    
  </entry>
  
  <entry>
    <title>2016 年个人总结</title>
    <link href="http://blog.devtang.com/2017/01/01/2016-summary/"/>
    <id>http://blog.devtang.com/2017/01/01/2016-summary/</id>
    <published>2017-01-01T14:55:57.000Z</published>
    <updated>2017-01-05T14:00:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于创业"><a href="#关于创业" class="headerlink" title="关于创业"></a>关于创业</h2><p>今年年中，公司顺利拿到了腾讯的一笔 <a href="http://www.jiemodui.com/N/48718.html" target="_blank" rel="external">4000 万美元的投资</a>。2016年，资本其实有些进入寒冬的感觉，好多公司都融不到资，我们能够进一步拿到融资，还是挺厉害的。</p>
<p>我们公司今年也借着融资的机会，向业界宣布改名成「猿辅导」，「猿辅导」是我们期望的商业化变现的途径，看起来虽然艰难，但是也还是能够有一些希望。这次从「猿题库」改名成「猿辅导」，其实是想更加重视这块核心业务。最终，我们在年底通过猿辅导的直播课做到了 <a href="https://www.jiemodui.com/N/63659.html" target="_blank" rel="external">1.2 亿</a> 的营收。今年很多公司靠直播挣到了钱，陌陌更是靠直播打了一个<a href="http://www.ifanr.com/716023" target="_blank" rel="external">翻身仗</a>。</p>
<p>嗯，今年我还被几次搞错成猿辅导的创始人，实在有点哭笑不得，可能是很多时候我会对外说「我在创业」，说「我们公司」，但是这个其实仅仅表示我是把自己当作创业团队的一份子，让自己拥有创业的心态，努力希望整个团队创业成功。我在猿辅导公司的职务是小猿搜题产品技术负责人，这是一个很重要的职位，我自己的期权也不少，所以对外表现出在创业的状态不是很正常么？</p>
<p>说到小猿搜题，今年最大的事情可能就是在年中的时候把猿辅导嵌入到小猿搜题中。内嵌另一个应用带来了大量的沟通和技术架构上的调整，不过最终这个改动还是值得的，让猿辅导得到了小猿搜题不少流量支持。</p>
<p>小猿搜题今年用户量很快就过亿了，我们内部吃了一个蛋糕庆祝了一下。不过用户量实在涨得有些快，我自己其实都没什么感觉。想想最激动的时候，竟然是去年庆祝用户量突破 1000 万的时候。这就像达成一个成就之后，就会有新的目标一样，小猿搜题在用户增长上已经很好了，大家的关注点就移到了别的问题上。</p>
<p>2015 年我的工作主要是组建和磨合团队，今年团队成员比较稳定了，我自己的工作主要是日常的项目跟进，重要成员沟通，产品把握。反思整个 2016 年团队的工作，我规划得还是不够系统，一些重要的功能没有优先做，另外一些优化工作做得很乱，不系统。希望 2017 年能够更加努力，让小猿搜题在竞争上有所突破。</p>
<h2 id="写作和分享"><a href="#写作和分享" class="headerlink" title="写作和分享"></a>写作和分享</h2><p>今年在写作上有些犹豫，一方面 iOS 开发不再是我的主要工作，要不要继续投入时间学习和分享 iOS 知识？另一方面，我又希望自己能够持续写作，有一些产出。最终我还是抽了不少时间写 iOS 方面的文章，开了几个新的主题来写，一个是 iOS 面试题，一个是 iOS 开发中的算法，但是都没有最终写完。Swift 烧脑系列倒是基本完结了，反响不错，以下是 Swift 烧脑系列的文章列表：</p>
<ul>
<li><a href="/2016/02/27/swift-gym-1-nested-optional/">Swift 烧脑体操（一） - Optional 的嵌套</a></li>
<li><a href="/2016/02/27/swift-gym-2-function-argument/">Swift 烧脑体操（二） - 函数的参数</a></li>
<li><a href="/2016/02/27/swift-gym-3-higher-order-function/">Swift 烧脑体操（三） - 高阶函数</a></li>
<li><a href="/2016/03/05/swift-gym-4-map-and-flatmap/">Swift 烧脑体操（四） - map 和 flatMap</a></li>
<li><a href="/2016/04/05/swift-gym-5-monad/">Swift 烧脑体操（五）- Monad</a></li>
<li><a href="/2016/05/22/swift-gym-6-type-infer/">Swift 烧脑体操（六）- 类型推断</a></li>
</ul>
<p>由于自己的工作涉及产品管理，所以我也开始尝试写一些产品体验报告，主要希望通过这种方式来增加自己产品的感觉，今年写的体验报告有：</p>
<ul>
<li><a href="/2016/12/03/liulishuo-dongni-english-summary/">流利说「懂你英语」体验报告</a></li>
<li><a href="/2016/12/18/kuaishou-summary/">快手体验报告</a></li>
</ul>
<h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><p>去年底定的一个月读一本书的目标基本完成了，读书笔记今年写了不少。有几本书特别难啃，所以最终离每月一篇读书笔记的目标还差一点。2016 年的读书笔记包括：</p>
<ul>
<li><a href="/2016/01/17/how-to-read-a-book-summary/">《如何阅读一本书》</a></li>
<li><a href="/2016/02/16/make-friend-with-time/">《奇特的一生》</a></li>
<li><a href="/2016/02/16/the-leadership-pipeline-summary/">《领导梯队》</a></li>
<li><a href="/2016/02/16/inspired-summary/">《启示录》</a></li>
<li><a href="/2016/04/19/control-yourself/">《把时间当做朋友》</a></li>
<li><a href="/2016/06/06/high-output-management-summary/">《格鲁夫给经理人的第一课》</a></li>
<li><a href="/2016/07/07/the-dictators-handbook-summary/">《独裁者手册》</a></li>
<li><a href="/2016/07/24/management-30-summary/">《管理 3.0》</a></li>
<li><a href="/2016/09/01/dev-level-up-stories/">《技术人创业攻略》</a></li>
<li><a href="/2016/09/16/what-is-love/">《少有人走的路》</a></li>
<li><a href="/2016/08/22/soft-skills/">《软技能：代码之外的生存指南》</a></li>
</ul>
<p>除了以上这些书之外，今年还读了《简约至上》，《点石成金》，GTD的入门书《搞定》，吴军老师的《硅谷之谜》，德鲁克的《管理的实践》，每月一期的《程序员》杂志（谢谢唐小引老师的赠阅），还有一些 iOS 方面的图书，不过这些都没整理出读书笔记。</p>
<h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>分享方面，2016 年 3 月 27 日，我参加了 InfoQ 举办的技术社群大会，我分享的主题是关于 iOS 开发的个人成长问题，分享之后相关内容也被整理成了文字，放到了我的博客上：<a href="/2016/07/20/from-newbie-to-master/">《成长为 iOS 大 V 的秘密》</a>。</p>
<p>2016 年 4 月份，我在南京的软件技术大会（4 月 16～17 日）以及上海的 SwiftCon 大会（4 月 23～24 日）上做了关于 Monad 的分享。然后，当了三次 iOS 技术会议的吉祥物（其实就是帮忙邀请嘉宾或者客串主持）：一次是年初的 atSwift 大会，一次是年中的 MDCC 大会，还有一次是年末的 iDev 大会。</p>
<p>池建强做了一个 1024 元的付费群，我也报名参加了。听了之次分享后，我也去那里做了一次分享嘉宾。分享是在支付宝付费群里面通过语音的方式，感觉也是非常有意思。</p>
<p>年底尝试了一次在趣直播的分享，主要讲的是 iOS 的安全和 App Transport Security，那天正好是圣诞节，但是还是有 1500 多人报名参加，直播到最后还有 600 人在线，算是一个不错的尝试。直播的稀缺性和互动模式确实比公众号带来的收益更高，不过参与人数上还是比公众号文章少一些，我最终从这次分享中收入了 3000 块钱的报名费，但更多的体会是体验了一把做主播的感觉。</p>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>2016 年 3 月，由于被撞库攻击，我丢失了百度云的帐号，里面有我保存的许多家人的照片，幸好找到 sunnyxx 通过百度的同事担保，才强制重置了密码。这件事情之后，我把我的个人密码全部修改了一遍，并且除了最重要的密码外，其余密码全部通过 1password 来管理，重要帐号也开启了二步验证。改完之后，我写了一篇 <a href="/2016/04/07/my-password-management-way/">《应该如何管理密码 - 我的密码管理心得》</a>。</p>
<h2 id="微信公众号和微博"><a href="#微信公众号和微博" class="headerlink" title="微信公众号和微博"></a>微信公众号和微博</h2><p>我的 「iOS开发」微信公众号订阅量达到了 4 万 6 千，不过感觉增长变得比较缓慢了，一方面可能是自己更新的频率有些降低，另一方面微信订阅号平台的红利感觉也已经结束了。由于公众号平台里面有一些与我重名的号，所以思考一段时间后，我把自己的公众号改名为「iOS开发by唐巧」,希望还是保证有一定的辨识度。今年我的微信公众号还是吸引了不少广告主投放，他们是 StuQ、稀土、极客学院、100offer，感谢各位金主。</p>
<p>我的微博粉丝缓慢增长，也达到了 4 万多，与微信公众号订阅量相当，不过微博的广告收入几乎为零。我依然保持基本只发 iOS 开发相关的微博，所以文章的转发量都还不错。</p>
<h2 id="好奇心"><a href="#好奇心" class="headerlink" title="好奇心"></a>好奇心</h2><p>希望自己每年都对事物保持好奇心。今年我基于好奇心做的事情包括：</p>
<ul>
<li><p>尝试了一把在老小区申请安装充电桩。今年初入了一个便宜的新能源车，然后就想试试能不能装个自用的充电桩。《独裁者手册》里面讲的社会原理在小区物业管理上表现得淋漓尽致，我尝试了各种沟通办法，在我快要放弃时最终搞定充电桩的安装。想想还是非常有意思的一次尝试，我甚至还去朝阳区信访办上访了一把，非常值得体验。从我花的时间和精力来看，这个充电桩安装得不值，但是从了解这个社会各种机构的运作机制来看，这还是一次性价比很高的学习过程。</p>
</li>
<li><p>出游了几次。其中普吉岛的那次公司集体出游，还是让我感受到了挺多不一样的文化。泰国人民那种安逸，满足的生活态度使得我们这群在互联网行业奋斗的人一下子感受到了很大的差别。整个北京都充满着奋斗，努力，成功的故事，而泰国给我带来的就是一个别样的幸福生活样版。</p>
</li>
<li><p>学习英语口语。今年我花了不少时间练习口语和听力，花一个月把流利说的「懂你英语」 Level 3 刷通关了。我之前没有刻意做英语的听说练习，由于早期 iOS 开发资料的匮乏，我听了不少 WWDC 的视频。但是我现在越来越发现，阅读和学习英语的资料是非常重要的，所以我希望能够将听力和口语都再提升一个档次，希望有一天可以流利地和国外的开发者相互交流，或者能够有机会去国外的技术会议上分享知识。中国的开发者在技术上从来是不差的，缺的就是交流的能力，所以如果能够走出国内的交流圈子，那么收获的将是和全球一流开发者交流的机会。</p>
</li>
<li><p>学会了自由泳。3 月份的时候，为了节省时间，花钱请了一个教练，然后坚持游了半年，到 7 月份的时候能够一次性 1000 米了，之后每天中午游 1000 米，当前最好成绩 26 分 10 秒，平均成绩大概在 28 分钟左右徘徊。公司搬到望京后荒废了两个月，希望继续坚持。</p>
</li>
</ul>
<h2 id="成绩"><a href="#成绩" class="headerlink" title="成绩"></a>成绩</h2><p>今年的成绩如下：</p>
<ul>
<li>SwiftCon 最佳演讲</li>
<li>博文视点优秀作者</li>
<li>《iOS 开发进阶》第 6 次重印，总印数 19000 册</li>
<li>小猿搜题用户量破亿</li>
</ul>
<img src="/images/2016-outstanding-speaker.jpg">
<img src="/images/2016-outstanding-author.jpg">
<h2 id="未来的计划"><a href="#未来的计划" class="headerlink" title="未来的计划"></a>未来的计划</h2><p>明年希望自己做好三方面的事情：</p>
<ul>
<li>总结和学习团队管理知识，把团队的工作规划好。</li>
<li>通过学习和写作，保持自己在 iOS 开发方面的能力。</li>
<li>英语听说能力进一步发展，达到和国外同行交流能力。</li>
</ul>
<h2 id="个人-Milestone"><a href="#个人-Milestone" class="headerlink" title="个人 Milestone"></a>个人 Milestone</h2><ul>
<li>小猿搜题用户量过亿。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于创业&quot;&gt;&lt;a href=&quot;#关于创业&quot; class=&quot;headerlink&quot; title=&quot;关于创业&quot;&gt;&lt;/a&gt;关于创业&lt;/h2&gt;&lt;p&gt;今年年中，公司顺利拿到了腾讯的一笔 &lt;a href=&quot;http://www.jiemodui.com/N/48718.htm
    
    </summary>
    
      <category term="summary" scheme="http://blog.devtang.com/categories/summary/"/>
    
    
      <category term="year-summary" scheme="http://blog.devtang.com/tags/year-summary/"/>
    
  </entry>
  
  <entry>
    <title>快手为什么成功？</title>
    <link href="http://blog.devtang.com/2016/12/18/kuaishou-summary/"/>
    <id>http://blog.devtang.com/2016/12/18/kuaishou-summary/</id>
    <published>2016-12-18T07:09:49.000Z</published>
    <updated>2016-12-29T12:22:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章整理自我在几个月前和公司产品同事做内部分享的一个小作业。为什么要分析快手？因为快手是一个很有意思的产品，用户数突破得很快。并且我认为网上的很多分析文章并不恰当，特别是知乎里面的部分评价快手的内容。</p>
<h2 id="快手的历史"><a href="#快手的历史" class="headerlink" title="快手的历史"></a>快手的历史</h2><ul>
<li>2011.3 快手诞生。当时叫 GIF 快手，是一款用来制作、分享 GIF 图片的手机应用。</li>
<li>2012.11 GIF 快手转型。将制作的内容存储为视频，只有在分享到其他平台，如微博时，才转换成 GIF 图片 </li>
<li>2013.10 确定短视频社交属性。强化社交能力。</li>
<li>2014.11 正式改名为「快手」。同年，快手在 App Store 连续 4 个月居前 50。 </li>
<li>2015.6 快手总用户突破 1 亿。 完成 C 轮融资，估值 20 亿美金。</li>
<li>2016.10 快手总用户达 3 亿。</li>
</ul>
<h2 id="网上的一些观点"><a href="#网上的一些观点" class="headerlink" title="网上的一些观点"></a>网上的一些观点</h2><h3 id="产品简洁"><a href="#产品简洁" class="headerlink" title="产品简洁"></a>产品简洁</h3><p>一种观点认为：快手成功的秘诀在于产品简洁和克制。这一点上快手确实做得非常特立独行。当你还没有注册登录时，打开快手，此里你能看到的就只有信息流，第一眼给人特别不精致的感觉，如下图所示：</p>
<img src="/images/kuaishou-1.jpg">
<p>但是，如果你仔细看快手在 App Store 上的更新说明的话，你就会发现快手近一年的更新说明只有两条：</p>
<ol>
<li>问题修复以及性能提升</li>
<li>优化用户体验</li>
</ol>
<p>这样的更新说明，不但从时间上超过了一年，而且还以周为频率在迭代。是的，快手的 iOS 很多版本更新时间接近一周，这基本上和苹果审核的速度一致了。也就是说，苹果才审完上一个版本，快手就已经准备好下一个更新版本了。下图是快手在 App Store 的更新记录：</p>
<img src="/images/kuaishou-2.jpg">
<p>但是，我并不认为快手的成功与产品简洁有什么必然关系，因为产品简洁从来都只是加分项，核心问题还是产品解决用户的需求。但是至少应该可以确定的是，快手当前的产品功能简洁并没有限制该产品的流行。</p>
<h3 id="猎奇，自虐，审丑"><a href="#猎奇，自虐，审丑" class="headerlink" title="猎奇，自虐，审丑"></a>猎奇，自虐，审丑</h3><p>微信公众号「X 博士」的有一篇攻击快手的文章，把快手的成功解释成人们的猎奇，自虐，审丑等心理，这篇文章被进一步转载到了知乎上的一个讨论:<a href="https://www.zhihu.com/question/25529377" target="_blank" rel="external">如何看待「快手」这个 App</a>，这个转载在讨论中排名第一，获得了 4300 多个赞同。这篇文章其实有很多漏洞，但是即便是知乎这样的平台，质疑这个观点的声音几乎没有。</p>
<p>但是我认为「X 博士」的观点是极不恰当的，后面我会详细解释我的观点。</p>
<h2 id="信息流的两种属性"><a href="#信息流的两种属性" class="headerlink" title="信息流的两种属性"></a>信息流的两种属性</h2><p>很有意思的是，我从毕业开始，就一直在和信息流产品打交道。我毕业时进入网易，做的第一个产品就是网易微博，这是一个信息流产品。之后我作为员工加入猿辅导（之前叫猿题库）参与创业，做的第一个产品叫粉笔网，是一个教育类的微博，这也是一个信息流产品。</p>
<p>做久了之后，我发现信息流产品通常都有两种属性：</p>
<ul>
<li>媒体（新闻）属性</li>
<li>社交属性</li>
</ul>
<p>这两种属性在信息流上面通常会相互抑制，产品方案最终会偏向一种属性，抑制另一种属性。</p>
<p>比如拿新浪微博来说，它的信息流属性就是重媒体，轻社交的，因为：</p>
<ul>
<li>大 V 可以在一瞬间将消息传播出去。</li>
<li>信息的转发设计使得传递成本非常低，容易形成刷屏效果。</li>
<li>关系链完全公开，评论完全公开。</li>
<li>你可以知道当天转发量最高的，最热的（新闻）事件。</li>
</ul>
<p>微博的这种产品特点，会使得新闻事件以及大 V 的信息被更方便的传播，而在上面建立社交圈子则相对不太方便。注意：我这里不是说不能在上面建立社交，实际上微博上也会有一些基于兴趣的小圈子。我只是强调说这个产品设计更「适合」新闻的传播。</p>
<p>而与此相反，微信的朋友圈就是一个重社交，轻媒体的信息流，因为：</p>
<ul>
<li>媒体性质的消息在朋友圈的传递被微信刻意抑制。</li>
<li>朋友圈的营销行为被严重监管。</li>
<li>关系链完全私密，评论严格保密，只能认识的人看见。</li>
<li>你不知道全中国当前看的最多的朋友圈文章是什么，但是能知道你的朋友当前在朋友圈转得最多的文章是什么。所以即便是传播，也是基于你的社交关系，产生的合乎你价值观的内容传播。</li>
</ul>
<h2 id="快手的信息流是什么属性的"><a href="#快手的信息流是什么属性的" class="headerlink" title="快手的信息流是什么属性的"></a>快手的信息流是什么属性的</h2><p>快手的信息流是什么属性的？在得出结论之前，我们先看看快手的产品设计：</p>
<ul>
<li>限制传播：没有转发功能，没有榜单。</li>
<li>没有基于阅读量的推荐。「发现」推荐的内容并不关注阅读量，而是关注别的信息，比如实时性，距离等。</li>
<li>设置中有大量鼓励隐私行为的选项。</li>
</ul>
<p>快手登录后底部有 3 个 tab：关注、发现、同城：</p>
<ul>
<li>「关注」里面当然是自己关注的人发的内容，与大 V 无关。</li>
<li>「发现」一栏中显然不是给大 V 的，因为里面的内容更多的是一些比较及时性的内容，红心数也不太高。后来我们也会聊到，发现中的内容更多是基于推荐的，而不是基于热门的。</li>
<li>「同城」一栏也不是给大 V 的，我翻了很多同城的信息，作者的粉丝数基本上都是个位数，每个信息的红心数也非常少。 </li>
</ul>
<p>对于传播的鼓励，只有在快手侧边栏的「八卦」（如下图），能够有可能看到一些自己关注的人的行为。但是这个行为是聚合起来的，所以即使有一篇文章想传播，也比较难通过这个地方获得。</p>
<img src="/images/kuaishou-3.jpg">
<p>所以，你看出来了吗？在产品设计上，快手在抑制信息流的媒体属性。「同城」里面的内容全部都是基本地理位置推荐的内容，很多内容红心数都是个位数，所以不是什么热门内容，快手为什么推荐它们？</p>
<p>我们再想想这些问题：</p>
<ul>
<li>你能在快手上找到当天点赞数最多的视频吗？快手有热门视频榜吗？ – NO！</li>
<li>你能在快手上转发你觉得很赞的视频给你的朋友吗？（我是指快手应用内，转发到微博和朋友圈的不算） – NO！</li>
</ul>
<p>由此我们看出，快手在刻意压制产品的媒体属性，强调社交属性，快手为什么要这么做，等我们看完快手的另一个特点再一起分析.</p>
<p>我们先接着说快手的另一个特点：个性化推荐。</p>
<h2 id="个性化推荐"><a href="#个性化推荐" class="headerlink" title="个性化推荐"></a>个性化推荐</h2><p>经过我的试用，我很快发现快手的推荐算法是可以「调教」的，除了双击给红心以及加关注之外，快手在每个视频顶部的红心旁边，都可以弹出「减少类似作品」的选项，该选项和「取消关注」是放在一起的，所以算是一个非常显眼的位置了。</p>
<img src="/images/kuaishou-4.jpg">
<p>另外我关注了一个魔术的帐号之后，“发现” 里面明显有了更多「魔术」相关的视频出现了。 这个和「今日头条」对比起来，就能感受到差别非常大，我在今日头条上花了一个星期算法调教，他还是给我推荐没有营养的花边社会新闻。</p>
<img src="/images/kuaishou-5.jpg">
<p>快手的个性化推荐做得非常直接和迅速，基本上只需要几次调教，就可以使得 “发现” 里面都是你感兴趣的内容。</p>
<p>好了，这个时候我们可以反驳「X 博士」的观点了，其实「X 博士」看到的猎奇，自虐，审丑的视频，都是由于他一直在给这类视频点赞！如果你不相信的话，最好的办法就是下载快手试一试，看看你能不能找到猎奇，自虐，审丑的视频，我由于开始没有调教对方向，我现在连想找都找不出来。</p>
<h2 id="快手是什么"><a href="#快手是什么" class="headerlink" title="快手是什么"></a>快手是什么</h2><p>介绍了这么多，我们终于可以给快手下一个定义了：</p>
<ul>
<li>它是一个基于视频的信息流。 </li>
<li>它通过 “发现” 功能来推荐和学习你的个人喜好。 </li>
<li>它通过 “同城” 鼓励社交行为。 </li>
<li>它鼓励个人形成自己的圈子，而不是像微博那样，每个人都围绕在大 V 周围。 </li>
<li>它鼓励个人私有圈子（类似朋友圈），它提供了 “私有用户”（关注前需要先经过同意），“禁止陌生人评论”，“禁止陌生人私信” 等设置。 </li>
</ul>
<p>好了，这样的快手会面临什么问题？冷启动！由于它的鼓励社交的产品形态，刚开始没人玩的时候，冷启动非常困难。需要运营人员想办法让大家都进来玩。而有意思的是，“发现” 功能刚好又可以弥补你刚来快手，没有建立社交关系的问题。</p>
<h2 id="快手为什么成功"><a href="#快手为什么成功" class="headerlink" title="快手为什么成功"></a>快手为什么成功</h2><p>所以说，知乎上的那篇攻击快手的文章，把快手的成功解释成人们的猎奇，自虐，审丑等心理，我认为是极不恰当的。</p>
<p>首先从功能设计上，鼓励传播的产品形态，更利于猎奇，自虐，审丑这类视频的传播，但是刚刚说了，快手在产品功能设计上，并没有这方面的设计。这么说吧，假如有一个和微博形态一样的 “快手”，那么由于有转发功能，那么这类视频传播起来会更快。但是在快手现在的产品设计中，只能通过 “发现” 功能来传播。而发现功能当前又被设计成学习你的个人喜好，那么很容易形成每个人各自不同的信息呈现。</p>
<p>快手真正成功的原因，我个人它满足了两类需求：</p>
<p> 1、社交需求。它通过运营，让大家形成了一个个的社交圈子，大家在这个圈子里面相互玩，这些圈子里面的人，有你的同学，你的同事，你的朋友，他们即使是随便拍个天空，你都会点个赞，回复一句：天气真好，今天去哪儿玩的啊？也正是因为这样的运营工作太难，快手的发展速度才会这么慢。一个产品从 2011 年上线，经过好几年的运营，才火起来。(和同事聊天，他们另外也提到，2011 年智能手机还太早，微信都还没有流行，所以时间点不合适）</p>
<p> 2、个性化内容获取需求。在社交圈子之外，快手通过 “发现” 的学习，来给你推荐一些基于你兴趣的内容。最终会使得你觉得信息流里面的大量内容都是你感兴趣的，根本停不下来。</p>
<p>这样，你的信息流最终会有两类信息：</p>
<ol>
<li>你的朋友的信息</li>
<li>你觉得有趣的信息</li>
</ol>
<p>显然，构建社交圈子这件事情是整个逻辑中最难实现的，因为有冷启动的问题，这也是为什么快手火得那么慢。但是同时这也是快手的极强的竞争壁垒，即使你发现它成功了，你也无法快速复制它。快手在抑制信息流的媒体属性，加强社交属性这件事情上做得非常克制，也非常果断。</p>
<p>最后，快手除了运营，还做了哪些有助于冷启动的事情呢？我自己的体会是里面段子视频特别多，可能是有一个运营团队在制作这些有趣的视频，放到发现中，以便于大家在没有建立社交关系时，有好玩的内容可看。</p>
<p>我身边的人几乎不用快手，所以我很难体验快手上的社交行为，不过试用几天后，我发现快手上的同城里面，有很多 Live 直播，在快手的直播频道里面，没有美女，只有一些打扮平常的女孩，很多直播点进去只有 3，5 个人在看，但是能感受到他们很熟悉，像聊天一样说着话，开着玩笑，我突然体会到了这就是快手构建的社交圈子，或许每天都有无数个这样的小圈子内的直播在进行着。这些直播间的平常女孩没有任何露骨的表演，但是因为大家认识，所以一切就具有了意义。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>快手是一个兼具个性化推荐和社交属性的短视频信息流产品。通过个性化推荐来解决社交类应用的冷启动问题，同时用社交属性来强化自己 App 的竞争壁垒和内容优势。它的产品方案简洁和克制，解决了人们通过视频打发时间和社交的部分需求，是一款值得学习的 App。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章整理自我在几个月前和公司产品同事做内部分享的一个小作业。为什么要分析快手？因为快手是一个很有意思的产品，用户数突破得很快。并且我认为
    
    </summary>
    
      <category term="summary" scheme="http://blog.devtang.com/categories/summary/"/>
    
    
      <category term="PM" scheme="http://blog.devtang.com/tags/PM/"/>
    
  </entry>
  
  <entry>
    <title>搞 iOS 学算法有意义吗？</title>
    <link href="http://blog.devtang.com/2016/12/17/flying-big-phenomenon/"/>
    <id>http://blog.devtang.com/2016/12/17/flying-big-phenomenon/</id>
    <published>2016-12-17T14:27:46.000Z</published>
    <updated>2016-12-17T14:34:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公众号写了两周的面试题，题目有少量涉及算法，有少量涉及底层原理。总有一些人在后台问：面试这个有意义吗？我不会还不是照样做 App。还有一些人说：这些题只适合问应届生。于是我今天就想聊聊这个话题：搞 iOS 开发，研究算法和底层有意义吗？</p>
<p>雷军说：站在风口上，猪都能飞起来。</p>
<p>但是雷军没有说，风口上的风不是一直都吹的。</p>
<p>飞起来的猪，如果没有抓住机会到达彼岸，那么暂时飞一阵子之后，还是会重重地摔到地上。</p>
<p>而 iOS 行业，就是一个最好的例子。</p>
<p>2012 年-2014 年，整个移动开发大火，根本就招不到移动开发的人才，各个公司没有办法，只能让服务器端的同学转岗来学习 iOS 开发。那个时候真是幸福，很多非科班出身的同学，在培训机构经过短短 3 个月的培训，然后就可以拿到上万的薪水。</p>
<p>但是，市场最大的特点就是会自我调节，短短时间内，iOS 开发者就充斥在市场上了，这个市场竟然饱和了。能不饱和吗？有一个读者给我留言，说他以前是做厨师的，因为培训机构说做 iOS 开发收入高，就选择了做开发。</p>
<p>我觉得大家应该理性思考这件事情，如果，我是说如果，iOS 开发真的可以培训 3 个月达到要求，那为什么这个职位的薪资比别的行业远高很多？学当厨师，学修理汽车，学理发，哪一个是短短 3 个月就能够学好的？而厨师，汽车修理工，理发师凭什么工资要比你拿得少？或者这么说，这些厨师，汽车修理工，理发师都不干了，都花 3 个月来学习 iOS 开发，市场会怎么反应？</p>
<p>所以说，你只能选择相信下面两种结论中的一个：</p>
<ul>
<li>iOS 开发不应该是一个高薪行业，因为随便一个人就可以三个月学会。</li>
<li>iOS 开发是一个高薪行业，他们选择招三个月培训出来的，只是暂时人才紧缺。</li>
</ul>
<p>如果你是培训机构出来的，那么赶紧想想自己喜不喜欢这个行业，愿不愿意投入至少一年来积累学习，搞清楚数据结构，操作系统，计算机网络，设计模式，基础算法。计算机程序实际上是逻辑，花时间锻炼自己的逻辑能力，做一些基础的算法题目，这对于你面试也有帮助。</p>
<p>如果你觉得面试的时候考这些没有意义，那么你就再想想你是不是认同这个结论：如果随便一个人都能学会 iOS 开发，你为什么拿那么高薪水，别的公司为什么招你？</p>
<p>如果你真要纠结意义，我可以说得更现实一点，这个行业这么多人想进来，就和每年上千万人想考公务员一样，面试还不是怎么难怎么来啊，而且你真的以为计算机基础真的就一定用不了吗？即便是只有 1% 的地方需要用到计算机基础帮助我们写出更好的 iOS 开发代码，那面试的公司也会问这些的，就像你可能完全不理解 Runloop 是什么也可以写 iOS 程序，但是面试的时候就会考 Runloop，因为就是有那么 1%，甚至 0.1% 的机会你工作中可能会用到它。</p>
<p>不止是 iOS 开发，你以为高考选拔在干嘛？高考考那么难的数学有意义吗？高考语文需要背那么多文章有意义吗？那不然怎么办？每年只有那么一点儿人可以进清华北大，不考难一些，大家分数都一样，怎么公平地选出谁上清华北大？反过来，高考考的那些，真的就完全没有意义吗？是不是还是相对公平地把聪明又努力的人挑出来了？</p>
<p>大家真的别太较真，这个世界就是这么运作的，你觉得做 iOS 开发学算法没有意义，学底层原理没有意义，那你可以不学，但是世界就是这么选拔人才的。</p>
<p>最后，真的不要再问我意义了，我还在风口忙着减肥呢！是的，其实我也很水，我也是一只被风吹起来的猪。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公众号写了两周的面试题，题目有少量涉及算法，有少量涉及底层原理。总有一些人在后台问：面试这个有意义吗？我不会还不是照样做 App。还有一些人说：这些题只适合问应届生。于是我今天就想聊聊这个话题：搞 iOS 开发，研究算法和底层有意义吗？&lt;/p&gt;
&lt;p&gt;雷军说：站在风口上
    
    </summary>
    
      <category term="iOS" scheme="http://blog.devtang.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>流利说「懂你英语」体验报告</title>
    <link href="http://blog.devtang.com/2016/12/03/liulishuo-dongni-english-summary/"/>
    <id>http://blog.devtang.com/2016/12/03/liulishuo-dongni-english-summary/</id>
    <published>2016-12-03T14:42:05.000Z</published>
    <updated>2016-12-03T14:42:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>最近报了流利说的 99 元一个月的「懂你英语」，之后又续了一个月，简单写一下体验报告。事先申明，这不是一个软文。</p>
<h2 id="什么是流利说的「懂你英语」"><a href="#什么是流利说的「懂你英语」" class="headerlink" title="什么是流利说的「懂你英语」"></a>什么是流利说的「懂你英语」</h2><p>「懂你英语」试图用最简单的、婴儿学语言的方式来学习英语，即：先盲听，即看不到什么单词，只有一张图片提示你说的内容。然后，你需要重复听和跟读，每次跟读时，可以判断跟读内容是否合格，如果合格，则会有 +1 的提示。</p>
<p>「懂你英语」是一种比较挣钱的商业模式，因为它完全依赖于机器来判分（而且是用户的手机），服务器只需要提供学习资源的下载服务即可，所以它的毛利率可以做到很高，我估计毛利率到 70% 是没问题的。</p>
<p>另外，「懂你英语」的产品设计是非常适合学习者的。因为它将学习任务进行了卡片式的任务拆解，所以你只需要关注于每天的任务完成就可以了。「懂你英语」要求每天练习口语 30 分钟，它在产品设计中通过每日学习统计，打卡，班主任督学，班级学习时长排名，学习效率分等各种细节来促使你坚持完成每天的学习任务。</p>
<p>这种任务式、关卡式的产品设计方案已经在很多产品设计中被采用，除了流利说外，像 Keep，洋葱数学也是这样。这样的设计使得大家能够专注于眼前的小任务，然后通过达成每一个小任务获得成熟感和激励，最终完成一个大的目标。</p>
<p>我现在认为，所有需要长久的学习任务，都应该拆分成小的阶段，以小任务的方式来完成。这就像我们工作的时候采用 Scrum，每个 Story 又拆分成一个个小的 Task 一样，让自己的工作即清晰，又可以在半天内完成。番茄钟的工作方式也是这样，将任务拆成若干个 45 分钟。产品的版本迭代也是这样，每个版本都有一个大的 Milestone，好的产品路线图既让人感觉目标清晰，又让人觉得目标可以达成。</p>
<h2 id="「懂你英语」附加的「服务」"><a href="#「懂你英语」附加的「服务」" class="headerlink" title="「懂你英语」附加的「服务」"></a>「懂你英语」附加的「服务」</h2><p>「懂你英语」比较好地做到了「服务」感，我个人认为这个是当前在线教育比较缺少的地方，这方面「懂你英语」值得被学习。说说我的体验吧：</p>
<ul>
<li>我报完名之后，App 会显示一个微信号，可以复制之后，关注公众号。</li>
<li>然后公众号进去之后，回复自己的帐号，可以获得班级群信息。</li>
<li>在班级群里面，班主任会主动和你沟通，帮你解答学习中的各种问题。</li>
<li>每天中午和晚上，班主任会发一条作业，很多时候是邀请大家一起来做，对于做了的同学，班主任会在群里解答。</li>
<li>每个周末，班主任会策划一个学习活动，有一些活动是小组活动，需要大家一起完成。</li>
<li>每天会有学习排行榜在群里，告诉大家哪些人学了，哪些人没学。</li>
<li>对于没有学习的人，班主任会在微信里面单独留言了解为什么没学。</li>
<li>班级快要结束的时候，班主任会一一私聊，问是否需要续费，并且介绍续费优惠活动。</li>
</ul>
<p>我从这个学习当中获得了：</p>
<p> 1、被老师服务的感觉<br> 2、一起学习的感觉（集体）<br> 3、竞争的感觉（排名）<br> 4、感情（同学，老师）</p>
<p>这些都使得我觉得「懂你英语」不是一个冷冰冰的机器服务，值得花 99 元来报名。</p>
<h2 id="「懂你英语」的问题"><a href="#「懂你英语」的问题" class="headerlink" title="「懂你英语」的问题"></a>「懂你英语」的问题</h2><p>夸完了「懂你英语」，再说说一些问题。这个课程依赖了两个很强的假设，但我认为这两者都还处于发展（或者不确定中）：</p>
<ul>
<li><p>假设一：成人像婴儿那样学语言，是更好的方式么？「懂你英语」称这个研究来自国外的某个教授，我没有深入查证。但是就我个人体验来说，明明知道一句话说的什么，但是完全无法知道这个单词如何拼写还是非常难受的。最终，一些用户甚至拿另一个手机打开 Google 的听写功能，用于识别这些内容的拼写。按理说，学完检测应该是一个很好的判断自己是否提高的方式，但是「懂你英语」考试的内容其实就是练习的内容，所以你也无从判断是因为自己熟悉这些内容说得好，还是自己真正口语得到提高了。</p>
</li>
<li><p>假设二：机器能够很好地判断发音是否正确。现在深度学习如火如荼，流利说做到了完全在本地就可以用人工智能算法判断发音是否准确，但是就我个人的体验来说，机器对于较短的单词发音过于严格，例如：<code>are</code>, <code>is</code>, <code>it</code>, <code>there</code>, <code>with</code> 这些单词，常常会显示成黑色（读得不好），而一些长的单词，比如 <code>comfortable</code>, <code>birthday</code>, 即使读得自己都感到有些错了，但是机器有时会显示成绿色（读得好）。我问了一下我们公司（猿辅导）的首席科学家邓博，他说这些简单的单词因为标注数据多，所以做得比较精确，而那些长的单词，因为标注数据要做多的话工作量很大，所以只能降低召回率，以便保证召回数据的正确率。</p>
</li>
</ul>
<p>但是这些问题其实都还好，因为口语练习最重要的就是说，即便你它判分不准，只要你天天坚持说 30 分钟，还是有效果的。</p>
<p>我之所以后来没有继续学，其实是因为「懂你英语」在通关的设计上，加了很多不合理地设计。比如到达 Level 4 之后，很多关卡的通关，依赖的是你背下前面的课程。我还记得 Level 4 的第二张卡片中的一个关卡，要求将文章的内容进行排序，除非你反复学习背下文章内容，否则是无法通关的。但是这其实并不能锻炼口语能力，只能练习记忆力。所以这让我感觉这个课程学习起来效率有些低下。类似的记忆考试挺多，有些考试直接就问：<code>How long did he stay in China? When did he graduated?</code> 这些都需要背。对于追求效率的我来说，我觉得背下课文通关没有意义，我需要的是练习口语，而不是熟悉并背下课文。即使要背下课文，我也希望是以高效地方式来背，而不是通过只听不看的方式来背诵。</p>
<p>最后，整个 App 的 Bug 还是挺多的，一些 Bug 让我甚至感觉到产品功能没有被仔细使用过，因为细心使用的话，明显就能体会到。不过相对于上面的产品问题，这些问题还不至于致命。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>就我个人感觉，「懂你英语」是一个差一点就成功的产品，很多地方可圈可点，它让我看到了未来在线教育产品的雏形。</p>
<p>如果未来它能够改进关卡设计上再进行打磨，同时机器在判断读音准确性上能够有再进一步的提升，那么确实有可能成为一个不错的语言自学服务。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;最近报了流利说的 99 元一个月的「懂你英语」，之后又续了一个月，简单写一下体验报告。事先申明，这不是一个软文。&lt;/p&gt;
&lt;h2 id=&quot;什么是流利
    
    </summary>
    
      <category term="summary" scheme="http://blog.devtang.com/categories/summary/"/>
    
    
      <category term="PM" scheme="http://blog.devtang.com/tags/PM/"/>
    
  </entry>
  
  <entry>
    <title>信息的迷失</title>
    <link href="http://blog.devtang.com/2016/12/03/talk-about-information-explosion/"/>
    <id>http://blog.devtang.com/2016/12/03/talk-about-information-explosion/</id>
    <published>2016-12-03T14:41:46.000Z</published>
    <updated>2016-12-29T12:21:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息的爆炸"><a href="#信息的爆炸" class="headerlink" title="信息的爆炸"></a>信息的爆炸</h2><p>还记得我读小学的时候，那个时候还没有互联网，所有人获取信息的渠道都来自传统的媒介：图书、报纸、广播、电视。那个时候，我无聊的时候可以把一本书反复翻，反复看，因为并没有什么别的书可以看。电视的普及应该是第一次将人们获取信息的能力进行了放大，电视除了让人们获取新闻之类的信息外，更多的是使得人们从中获得娱乐信息，即娱乐的方式从传统的纸媒和广播，变成了多媒体视频，进而产生了一个巨大的娱乐产业。</p>
<p>互联网的产生，除了让信息的获取成本变得极为容易外，同时也让信息经历了再一次的爆炸。由于信息实在太多了，所以有了搜索引擎，帮助我们检索需要的信息。另外，wikipedia、大学的 Mooc 视频，让大量优质的内容获得也变得极为容易。</p>
<h2 id="信息的触手可得"><a href="#信息的触手可得" class="headerlink" title="信息的触手可得"></a>信息的触手可得</h2><p>以前我们要接入互联网获得信息，我们通常需要打开电脑，这本身就是一个昂贵的成本。现在由于智能手机的普及，接入互联网变得极为容易，我们甚至不需要解锁输入密码或指纹，在手机的锁屏界面上就可以获得大量的信息。</p>
<p>移动互联网真正牛逼的地方就在于它改变了互联网的接入方式，它让每一个人都能做到随时在线，所以，10 年前的 QQ 有在线和离线的状态，而现在的微信则没有，所有人都始终是在线的。</p>
<h2 id="信息的迷失"><a href="#信息的迷失" class="headerlink" title="信息的迷失"></a>信息的迷失</h2><p>可是问题是：没有人能够消费完这么多的信息。我们有一款初高中生的题库 App：猿题库，到现在为止我们收录了百万级的题目，没有人能够做得完这么多题目。所以我们提供了智能的推荐算法，帮助学生找到最适合他练习的题目。</p>
<p>信息检索和推荐算法，某种程度上解决了海量信息的获取问题，但是却解决不了注意力被分散的问题。</p>
<p>让我们看看这个场景：某一天你 6 点钟回到家，打算做一件事情，突然你手机收到一条 Push，其实是一条网易新闻的推送，新闻的标题很吸引人，于是你打开了。看完这条新闻，你不自觉地又看起来别的新闻。看完新闻后，你又不自觉地打开微信，翻朋友圈的消息，给好友点赞，点完一圈赞后，你又打开微信订阅号，查看订阅的一些文章。等你突然觉得困了，你才发现本来要做的事情完全忘记掉了！</p>
<p>基本上，那些用于你打发碎片时间的应用，不但把你的碎片时间打发了，而且把你的主要时间也打发掉了。</p>
<p>是的，大部分在信息面前迷失掉了，我的母校北京师范大学心理学系曾经专门有人研究过人们在电脑和手机上注意力的转移，大部分人只要稍不加控制，大脑的注意力就轻易地被各种红点，通知提醒，QQ 消息或者浮窗广告吸引了。</p>
<h2 id="信息的屏蔽"><a href="#信息的屏蔽" class="headerlink" title="信息的屏蔽"></a>信息的屏蔽</h2><p>总会有一天，大家都会意识到信息太多也是问题，然后会学会屏蔽信息。</p>
<p>我发现的最简单的屏蔽信息的办法是将自己当天的 Todo List 写在一张小小的便签纸上，然后贴在屏幕的一角，做完一件事情则划掉进行下一项。如果因为各种原因（电话，短信，别人的打扰）而中断，我就可以通过这张小小的纸片找回自己的目标。</p>
<p>当然，我们也可以用更复杂的办法，例如使用番茄工作法，或者 GTD 中提到的任务处理方式，来使得自己更加容易专注地处理信息和任务。</p>
<p>大家太依赖手机了，甚至离开手机太久都会不舒服。不知道大家有没有试过将手机关机一整天？我相信你会感受到你就像被世界屏蔽了，失去了和整个世界的连接。但是其实，人们总是需要一些长时间的思考的，或许是解决工作上的问题，或许是个人的一些规划，或许是思考未来，这些时候，断开和世界的连接反倒是好的。</p>
<p>乔布斯在他的自传中提到他年轻的时候很喜欢禅修，在我看来，这其实就是一种放空大脑，让自己专注于思考的一种体验。一旦人们体验到专注思考的好处，就不会那么依赖网络了。</p>
<h2 id="自媒体的崛起和衰落"><a href="#自媒体的崛起和衰落" class="headerlink" title="自媒体的崛起和衰落"></a>自媒体的崛起和衰落</h2><p>在传统的年代，明星出名都是需要依赖传统媒体的，或许是报纸，或许是电视，而这些渠道有着极强的控制力，所以可以轻易对明星进行封杀或捧星。但是，互联网的出现，使得信息传播的渠道变得不但多样化而且免费，像新浪微博，微信公众号，知乎，一些论坛，都成为大 V 极好的成名渠道，而且这些大 V 的成名，基本上完全依赖于他们自己的本身的能力，靠本事吃饭，与渠道无关。</p>
<p>于是，这成为了自媒体人最好的年代，优质的内容可以在极短的时间内传播开来，帮助大 V 获得粉丝和影响力。</p>
<p>但是，人们的注意力终究是有限的，在早期的少量自媒体人享受到渠道开放的红利之后，由于信息的爆炸，更多的优秀内容反倒是被埋没在信息的汪洋之中。后期的自媒体人要获得足够的注意力，需要在内容质量上花费更多的心血。大部分无法创建出极度优秀的内容的自媒体人，在这样的年代完全没有了翻身的机会。</p>
<h2 id="渠道的再次崛起"><a href="#渠道的再次崛起" class="headerlink" title="渠道的再次崛起"></a>渠道的再次崛起</h2><p>信息的爆炸，自媒体的涌现，使得人们再一次需要一种内容筛选的服务，即便这种服务是付费的。于是我们看到，一些基于优质内容的付费服务再次得到人们地青睐，比如「得到」App，比如知乎Live，各种收费直播服务。这些付费服务的成功原因有很多：被服务感、直播的参与感与真实感，但不可否认，对于优质内容的价值认可，以及在海量信息中选择的无助，也是这些服务被认可的基础。</p>
<h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p>未来的信息消费是更趋于集中还是分散，我没有定论。不过未来相比信息本身的价格，人们的时间成本会变得更加重要，因为每一个人的时间都是稀缺资源，没有人愿意拿自己的生命来「试错」。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;信息的爆炸&quot;&gt;&lt;a href=&quot;#信息的爆炸&quot; class=&quot;headerlink&quot; title=&quot;信息的爆炸&quot;&gt;&lt;/a&gt;信息的爆炸&lt;/h2&gt;&lt;p&gt;还记得我读小学的时候，那个时候还没有互联网，所有人获取信息的渠道都来自传统的媒介：图书、报纸、广播、电视。那个时候，
    
    </summary>
    
      <category term="summary" scheme="http://blog.devtang.com/categories/summary/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS 移动开发周报 - 第 48 期</title>
    <link href="http://blog.devtang.com/2016/11/01/ios-weekly-48/"/>
    <id>http://blog.devtang.com/2016/11/01/ios-weekly-48/</id>
    <published>2016-11-01T15:26:06.000Z</published>
    <updated>2016-11-01T15:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h2><h3 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><p>由于众所周知的原因，国内并不能访问到官方的 Ruby 源，所以大部分朋友可能都是使用的国内的镜像源。而这里面，使用的最多的，可能就是淘宝提供的镜像源了。不过最近淘宝的镜像源 ruby.taobao.org 停止更新了，所以使用 CocoaPods 的同学，请更新到 ruby china 的源。详细的内容，请参见：<a href="https://ruby-china.org/topics/29250" target="_blank" rel="external">https://ruby-china.org/topics/29250</a>。</p>
<p>另一方面 , CocoaPods 最近也升级到了 <a href="http://blog.cocoapods.org/CocoaPods-1.1.0/" target="_blank" rel="external">1.1.0 版本</a>，主要是增加了对 Xcode 8 的支持。</p>
<h3 id="苹果发布会"><a href="#苹果发布会" class="headerlink" title="苹果发布会"></a>苹果发布会</h3><p>苹果在不久前发布了新款 <a href="https://36kr.com/p/5055335.html" target="_blank" rel="external">MacBook Pro</a>，库克对 Vim 党痛下杀手，取消了 ESC 键。另外增加了酷炫的 Touch Bar。有小伙伴已经尝试了 Touch Bar 对外的编程接口，说是和 「watchOS 很像」。一向前位的苹果也取消了包括 USB 在内的众多接口，只保留了 Thunderbolt 3 接口。</p>
<h3 id="Swift-Server-Api"><a href="#Swift-Server-Api" class="headerlink" title="Swift Server Api"></a>Swift Server Api</h3><p>苹果在 Swift 官方网站上新建了一个基于 Swift 的 <a href="https://swift.org/server-apis/" target="_blank" rel="external">API 项目</a>，该项目用于支持将 Swift 用于服务器端开发的基础设施的构建。</p>
<h3 id="UniBeast"><a href="#UniBeast" class="headerlink" title="UniBeast"></a>UniBeast</h3><p><a href="https://www.tonymacx86.com/threads/unibeast-install-macos-sierra-on-any-supported-intel-based-pc.200564/" target="_blank" rel="external">UniBeast</a> 是一个能够将 macOS Sierra 安装到任何基于 Intel CPU 的电脑上。</p>
<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ul>
<li><p><a href="http://www.zoomfeng.com/blog/ipa-size-thin.html" target="_blank" rel="external">《iOS 安装包瘦身指南》</a>： 本文介绍了包括资源优化，编译选项优化，可执行文件优化等 IPA 文件的瘦身方法。</p>
</li>
<li><p><a href="http://www.jianshu.com/p/f792f9aa2e45" target="_blank" rel="external">《Xcode8调试黑科技：Memory Graph实战解决闭包引用循环问题》</a>：Xcode8 的调试技能又增加了一个黑科技：Memory Graph。简单的说就是可以在运行时将内存中的对象生成一张图，这样检查循环引用问题将更加方便。</p>
</li>
</ul>
<h2 id="有趣"><a href="#有趣" class="headerlink" title="有趣"></a>有趣</h2><p>本周趣图，是苹果公司在 2008 年生产的一款黑色 MacBook，看久了银白色的 MacBook 的你，是否感到耳目一新？</p>
<p><img src="http://ww1.sinaimg.cn/large/65dc76a3jw1f9d0wslzigj20lu0czwgn.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新闻&quot;&gt;&lt;a href=&quot;#新闻&quot; class=&quot;headerlink&quot; title=&quot;新闻&quot;&gt;&lt;/a&gt;新闻&lt;/h2&gt;&lt;h3 id=&quot;CocoaPods&quot;&gt;&lt;a href=&quot;#CocoaPods&quot; class=&quot;headerlink&quot; title=&quot;CocoaPo
    
    </summary>
    
      <category term="iOS weekly" scheme="http://blog.devtang.com/categories/iOS-weekly/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS 移动开发周报 - 第 47 期</title>
    <link href="http://blog.devtang.com/2016/10/16/ios-weekly-47/"/>
    <id>http://blog.devtang.com/2016/10/16/ios-weekly-47/</id>
    <published>2016-10-16T15:34:22.000Z</published>
    <updated>2016-10-16T14:52:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h2><h3 id="苹果解释-Dash-下架的原因"><a href="#苹果解释-Dash-下架的原因" class="headerlink" title="苹果解释 Dash 下架的原因"></a>苹果解释 Dash 下架的原因</h3><p>上周关于 Dash 被苹果下架的事情有了来自 <a href="http://www.loopinsight.com/2016/10/10/apple-responds-to-dash-controversy-with-proof/" target="_blank" rel="external">苹果的解释</a>，苹果说 Dash 进行了刷榜，具体来说，是在 Dash 的评价中发现了一些明显带有欺骗性的评分。苹果同时说这个决定是最终的，并且不可申述（final and can’t be appealed），所以这件事情可能最终的结果就是这样了。</p>
<p>我们从这件事情中可以看出，苹果对于刷榜的行为变得越来越严厉了。但是在国内，刷榜的行为还是普遍存在，而且大多数都没有受到惩罚。例如，我们公司的三款产品都没有刷榜，但是我们的竞争对手其实都有明显的刷榜行为。希望苹果能够有机会也整治一下国内的环境，让大家都在一个公平的环境中竞争。</p>
<h3 id="Swift-4"><a href="#Swift-4" class="headerlink" title="Swift 4"></a>Swift 4</h3><p>是的，Swift 4 开始开发了，在 Swift 4 在 GitHub 的主页上，苹果公布了 Swift 4 的 <a href="https://github.com/apple/swift-evolution/blob/master/README.md#development-major-version--swift-40" target="_blank" rel="external">主要目标</a>。时间上，苹果计划在 2017 年晚些时候正式发布 Swift 4。苹果希望将 Swift 4 的开发分为两个阶段：</p>
<ul>
<li>第一阶段：关注于核心的一些需求，以及 ABI 的稳定性。苹果不希望在 Swift 4 中引入 ABI-breaking 的改变。</li>
<li>第二阶段：该阶段希望在 2017 年春能够开始讨论，在第一阶段的任务完成后，可以增加一些或大或小的新特性。</li>
</ul>
<h3 id="iDev-大会"><a href="#iDev-大会" class="headerlink" title="iDev 大会"></a>iDev 大会</h3><p>​<a href="http://www.bagevent.com/event/207773" target="_blank" rel="external">iDev 大会</a>是一场由开发者自己办的技术会议，会议内容主要面向苹果的开发者，我是这次会议的出品人。</p>
<p>今年 iOS 的话题其实集中在 Swift 语言、函数式编程、跨平台方案，所以这方面的话题本次大会都有涉及。另外 iOS 安全一直是被人们较为忽视的一个方面，本次大会我在这方面也特别有设计议题讨论。</p>
<p>考虑到 iDev 大会希望涉及苹果全平台的技术，所以本次大会我们也安排了关于 macOS、watchOS 和 HomeKit 的议题。</p>
<p>对了，购票时输入我的优惠码：tangqiao，可以获得折扣票价再打 85 折哟。你也可直接访问以下网址获得优惠过的价格：<br><a href="http://www.bagevent.com/event/207773?discountCode=tangqiao" target="_blank" rel="external">http://www.bagevent.com/event/207773?discountCode=tangqiao</a></p>
<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="闭包的-escaping-与-non-escaping"><a href="#闭包的-escaping-与-non-escaping" class="headerlink" title="闭包的 escaping 与 non-escaping"></a>闭包的 escaping 与 non-escaping</h3><p><a href="https://oleb.net/blog/2016/10/optional-non-escaping-closures/" target="_blank" rel="external">Optional Non-Escaping Closures</a>： 本文讨论了 Swift 中的闭包的 escaping 的情况。所谓 escaping，就是指闭包在作为参数，传递给相应函数之后，相应函数执行完成了，但是闭包可能还需要被调用。所以，这个闭包似乎是逃离（escaping）了函数的作用时间。因为按理说函数执行完了，相应的参数应该就没用了，但是对于 escaping 的闭包，却不是这样。</p>
<p>什么情况下会出现这种情况呢？最常见的场景就是异步调用。比如我们发起一个网络请求，传入了一个闭包作为回调参数。这个闭包显然需要在网络请求结束时，才会被调用，这就是一个 escaping 的闭包。类似的还包括：我们把一些闭包放到 GCD 提供的 Dispatch Queue 中，也会造成 escaping 的闭包。</p>
<p>在本文中，作者讨论了一种比较特别的现象：只要一个闭包是 Optional 的，则它一定会是一个 escaping 的闭包。作者讨论了产生此问题的原因，并且提供了一些解决方案。</p>
<h3 id="把第三方-iOS-应用转成动态库"><a href="#把第三方-iOS-应用转成动态库" class="headerlink" title="把第三方 iOS 应用转成动态库"></a>把第三方 iOS 应用转成动态库</h3><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&amp;mid=2709545228&amp;idx=1&amp;sn=7a47a0de32e06f9c465319e8db8ca13f&amp;chksm=828f0bd2b5f882c46416ab20cd9ea482b3c57b202d876b75d5625a1bb036d40fe01d31c2679a&amp;mpshare=1&amp;scene=1&amp;srcid=1009N6R6XQyc1MDWhh0MfG7h#rd" target="_blank" rel="external">《黑科技：把第三方 iOS 应用转成动态库》</a>，本文介绍了一个自己写的工具，能够把第三方 iOS 应用转成动态库，并加载到自己的 App 中，文章最后会以支付宝为例，展示如何调用其中的 C 函数和 OC 方法。另外，本文首发在我的微信公众号：iOSDevTips 中，如果你还没有关注过，请扫码关注哟：</p>
<p><img src="http://ww4.sinaimg.cn/mw690/65dc76a3jw1f1ngaau9arj20760763yr.jpg" alt=""></p>
<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><p>本周视频推荐 objc.io 出的一期视频：<a href="https://talk.objc.io/episodes/S01E15-building-parser-combinators-part-1" target="_blank" rel="external">手写一个 Parser</a>。</p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>本周推荐的工具，是一个 Xcode 8 的效率工具。它可以方便你在任何时候输入需要 import 的内容。其实这类工具在别的平台都是 IDE 自动提供的，以前我在用 Eclipse 写后台的时候，用了一个需要 import 的库的类，只需要按 cmd + shift + o，IDE 就会自动把这些需要 import 的头文件帮你填上，以节省时间。Xcode 在这方面，还有挺多需要加强的。Anyway，Xcode 的 extension 这个机制也让我们能够自己动手丰衣足食了。</p>
<p>该工具在 GitHub 上的地址是 <a href="https://github.com/markohlebar/Import" target="_blank" rel="external">Import</a>，以下是使用起来的效果动画：</p>
<p><img src="https://raw.githubusercontent.com/markohlebar/Import/master/Resources/usage.gif" alt=""></p>
<h2 id="有趣"><a href="#有趣" class="headerlink" title="有趣"></a>有趣</h2><p>本周的趣图来自 <a href="http://weibo.com/lexrus?from=feed&amp;loc=nickname" target="_blank" rel="external">汤圣罡</a>，由苹果的各种配件组成的一个笑脸，愿大家都有一个愉快的一天。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/68212547jw1f87dsllmyzj20u00u0q4h.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新闻&quot;&gt;&lt;a href=&quot;#新闻&quot; class=&quot;headerlink&quot; title=&quot;新闻&quot;&gt;&lt;/a&gt;新闻&lt;/h2&gt;&lt;h3 id=&quot;苹果解释-Dash-下架的原因&quot;&gt;&lt;a href=&quot;#苹果解释-Dash-下架的原因&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="iOS weekly" scheme="http://blog.devtang.com/categories/iOS-weekly/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS 移动开发周报 - 第 46 期</title>
    <link href="http://blog.devtang.com/2016/10/10/ios-weekly-46/"/>
    <id>http://blog.devtang.com/2016/10/10/ios-weekly-46/</id>
    <published>2016-10-10T13:08:08.000Z</published>
    <updated>2016-10-10T12:43:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大家国庆节过得如何？我反正是整个人的作息都变了，估计要调整过来得花不少时间。</p>
<p>国庆节期间开车还经历了人生第一次剐蹭，倒车时方向盘转得过猛，车头把停在旁边的一台宝马 5 系给蹭到了，吓得我赶紧报了保险。结果最后定损的维修费用也就几百块钱，用交强险就 cover 住所有费用了。人生就是不停地经历，有了这次出险，以后估计开车会更加小心。</p>
<p>好了，言归正传，我们来看看本周的 iOS 新闻。</p>
<h2 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h2><h3 id="Search-Ads-上线"><a href="#Search-Ads-上线" class="headerlink" title="Search Ads 上线"></a>Search Ads 上线</h3><p>苹果的 AppStore 搜索广告终于 <a href="https://developer.apple.com/news/?id=09282016a" target="_blank" rel="external">正式上线了</a>，不过现在仅支持 iPhone 平台和美国区。AppStore 搜索广告类似于百度搜索关健词的竞价排名机制，该平台未来在中国区上线之后，我估计会使得一部分刷榜行为转移到正常的广告投放上。另外各个公司其实也需要及时介入，对自己的商标或产品关键词进行提前保护，以避免被恶意投放广告。关于 Search Ads 的详细介绍，今年的 WWDC 有<a href="https://developer.apple.com/videos/play/wwdc2016/302/" target="_blank" rel="external">专门的介绍视频</a>，建议大家都看看。</p>
<h3 id="Dash-被-AppStore-下架"><a href="#Dash-被-AppStore-下架" class="headerlink" title="Dash 被 AppStore 下架"></a>Dash 被 AppStore 下架</h3><p>Dash 是一款优秀的 Mac 效率工具，恰当的使用它，可以极大地提高你的输入速度。最近，作者被 Apple 告知其帐户「因涉嫌诈欺」而被停权。作者提供了授权迁移工具，便于大家将授权转移出来。详情：<a href="https://zhuanlan.zhihu.com/p/22782111" target="_blank" rel="external">阅读原文</a>。</p>
<p>关于 Dash 被下架的原因，大家众说纷纭，其中有一个说法是：Dash 在将其的个人帐户转成企业帐户时，涉及的邓白氏码（DUNS）的代理公司可能提供的信息有问题，牵连了 Dash。</p>
<h3 id="春雨医生创始人张锐去世"><a href="#春雨医生创始人张锐去世" class="headerlink" title="春雨医生创始人张锐去世"></a>春雨医生创始人张锐去世</h3><p>我和张锐有过在网易门户的短暂共事经历，不曾想到张锐正值创业上升时期 <a href="http://politics.caijing.com.cn/20161006/4183250.shtml" target="_blank" rel="external">离世</a>，令人唏嘘不已。国内互联网公司虽然有着远高于别的行业的平均薪水，但是也同时伴随着极高的工作强度，不管是创业公司，还是已经上市的 BAT，加班就犹如家常便饭。但是，身体总归还是我们自己的，希望大家都能平衡好事业和身体。</p>
<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="Swift-3"><a href="#Swift-3" class="headerlink" title="Swift 3"></a>Swift 3</h3><p>Swift 3 的迁移工作并不轻松，喵神说他的开源库 <a href="https://github.com/onevcat/Kingfisher" target="_blank" rel="external">Kingfisher</a> 大概花了 200 个提交，才完成了迁移工作。</p>
<p>最近，Glow 技术团队分享了 Swift 3 带来的改变，感兴趣的可以<a href="http://tech.glowing.com/cn/swift3/" target="_blank" rel="external">点这里阅读</a>。</p>
<p>国庆前，图拉鼎也分享了适配 Swift 3 的一点小经验和坑，<a href="https://imtx.me/archives/2064.html" target="_blank" rel="external">点这里阅读</a>。</p>
<h3 id="Let’s-Talk-About-project-pbxproj"><a href="#Let’s-Talk-About-project-pbxproj" class="headerlink" title="Let’s Talk About project.pbxproj"></a>Let’s Talk About project.pbxproj</h3><p><code>project.pbxproj</code> 文件被包含于 Xcode 工程文件 <code>*.xcodeproj</code> 之中，存储着 Xcode 工程的各项配置参数。它本质上是一种旧风格的 Property List 文件，历史可追溯到 NeXT 的 OpenStep。其可读性不如 xml 和 json，苹果却一直沿用至今，作为一家以创新闻名的公司可能这里剩下的就是情怀吧。</p>
<p>本文谈了下 <code>project.pbxproj</code> 的知识，并总结了一些操作工程文件的优秀轮子，并在最后给出了自己的解决方案 <a href="https://github.com/yulingtianxia/pbxprojHelper" target="_blank" rel="external">pbxprojHelper</a>。</p>
<p>阅读请戳：<a href="http://t.cn/Rcg8jUc" target="_blank" rel="external">http://t.cn/Rcg8jUc</a></p>
<h3 id="Swift-算法"><a href="#Swift-算法" class="headerlink" title="Swift 算法"></a>Swift 算法</h3><p>Ray Wenderlich 上有一个算法系列的专题，叫做《Swift Algorithm Club》，每个月会出一篇文章，介绍如何用 Swift 实现一些基本的算法，最新的一期文章是《Swift Linked List Data Structure》，感兴趣的<a href="http://t.cn/RVzeGCu" target="_blank" rel="external">点这里阅读</a>。</p>
<h2 id="会议"><a href="#会议" class="headerlink" title="会议"></a>会议</h2><h3 id="dev-world-2016-大会"><a href="#dev-world-2016-大会" class="headerlink" title="/dev/world/2016 大会"></a>/dev/world/2016 大会</h3><p>在澳大利亚举办的 /dev/world/2016 大会结束后，主办方公开的相关的大会演讲视频。视频内容涉及跨平台开发、UI 设计、自动化测试、Swift、函数式编程，欢迎围观：<a href="http://t.cn/RcucyX2" target="_blank" rel="external">http://t.cn/RcucyX2</a>。注意地址在 youtube 上，需要翻墙。</p>
<h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><p>本周开源项目推荐的是 <a href="https://github.com/castial/HYFileManager/blob/master/Docs/README_cn.md" target="_blank" rel="external">HYFileManager</a>，HYFileManager 一个基于 NSFileManager的文件操作类，它提供一系列的静态方法，只用少量的代码，来处理经常需要处理的文件操作，使得工作更加方便快捷。</p>
<h2 id="有趣"><a href="#有趣" class="headerlink" title="有趣"></a>有趣</h2><p>据说下图表示的是「断点调试」的场景：</p>
<p><img src="http://ww4.sinaimg.cn/mw690/805c3d47jw1f8l8r3389gg20dw0a1b08.gif" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;大家国庆节过得如何？我反正是整个人的作息都变了，估计要调整过来得花不少时间。&lt;/p&gt;
&lt;p&gt;国庆节期间开车还经历了人生第一次剐蹭，倒车时方向
    
    </summary>
    
      <category term="iOS weekly" scheme="http://blog.devtang.com/categories/iOS-weekly/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS移动开发周报-第45期</title>
    <link href="http://blog.devtang.com/2016/09/26/ios-weekly-45/"/>
    <id>http://blog.devtang.com/2016/09/26/ios-weekly-45/</id>
    <published>2016-09-26T14:15:15.000Z</published>
    <updated>2016-09-26T14:22:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>是的，我又开始写周报了！主要是因为喵神不写周报了，加上我发现大家对写 iOS 技术周报这件事情似乎没什么兴趣。其实我觉得这是一个挺好的学习总结的办法，所以要不就继续我来吧。</p>
<p>我会每周从国外的周报，微博，GitHub，QQ / 微信群里收集各种 iOS 的信息，然后挑选一些有价值的分享给大家。</p>
<h2 id="MDCC"><a href="#MDCC" class="headerlink" title="MDCC"></a>MDCC</h2><p>MDCC 大会刚刚结束，这次大会请来了在日本的喵神王巍，滴滴的孙源，LeanCloud 的陈宜龙等众多 iOS 开发者。会议的所有 iOS 讲稿都会更新到这个地址，感兴趣的同学请一定关注更新：<a href="https://github.com/MDCC2016/iOS-Session-Slides" target="_blank" rel="external">https://github.com/MDCC2016/iOS-Session-Slides</a></p>
<p>王巍提前已经将他的讲稿和 Demo 代码公布在微博上了，地址是：<a href="http://weibo.com/1708947107/E9JHnoNtS" target="_blank" rel="external">http://weibo.com/1708947107/E9JHnoNtS</a></p>
<h2 id="苹果加强应用标题审核力度"><a href="#苹果加强应用标题审核力度" class="headerlink" title="苹果加强应用标题审核力度"></a>苹果加强应用标题审核力度</h2><p>你的应用最近因为起名字的原因被拒过吗？在以前，由于标题文字在搜索中的排序权重较高，所以有一些应用会把一些热门关键词写在标题中。苹果对此行为一直管得不严，有些审核员管，有些审核员不管。不过最近似乎每个审核员都更加严格执行这项标准了，那些稍长的名字，都被要求进行进一步的精简。详见：<a href="http://www.gupowang.com/app/5057.html" target="_blank" rel="external">http://www.gupowang.com/app/5057.html</a></p>
<h2 id="适配-iOS-10"><a href="#适配-iOS-10" class="headerlink" title="适配 iOS 10"></a>适配 iOS 10</h2><p>Xcode 10 发布以后，编译器开始不支持 iOS 7，所以很多应用在适配完 iOS 10 以后，都不再支持 iOS 7 了。我的同事看了一下，包括网易新闻，滴滴出行这些大应用也都选择了不再兼容 iOS 7 的方法。但是也有一些应用选择适配 iOS 10 同时支持 iOS 7，这些应用有 QQ，美团 等。由于 AppStore 支持 iOS 7 的设备下载旧的版本，所以我个人觉得即便不支持 iOS 7，所以不支持 iOS 7 或许是最省事的办法。</p>
<h2 id="Swift-3"><a href="#Swift-3" class="headerlink" title="Swift 3"></a>Swift 3</h2><p>Swift 3 推出之后，Ray 出了一个迁移到 Swift 3 的视频教程，感兴趣的同学可以看看，不过据说，Alarmfire 网络库在适配 Swift 3 后，只支持 iOS 9 以上的版本。这对于国内系统升级缓慢的应用来说，似乎是一个很尴尬的事情。另一个尴尬的事情是迁移 Swift 3 还需要各种第三方库的配合，当前看起来，还需要一些时间。所以，建议大家还是继续使用 Swift 2.3  的版本。<a href="https://videos.raywenderlich.com/screencasts/ios-10-swift-3-in-3-minutes" target="_blank" rel="external">https://videos.raywenderlich.com/screencasts/ios-10-swift-3-in-3-minutes</a></p>
<h2 id="Push-Notifications"><a href="#Push-Notifications" class="headerlink" title="Push Notifications"></a>Push Notifications</h2><p>苹果最近改进了它的 Push Notifications 使用方式，除了可以使用以前的证书验证方式外，增加了一种名为 Token Authentication 的方式。苹果原话说： A token is easy to generate, doesn’t expire, and can be used to send notifications to all of your apps. 感兴趣的读者可以试试，相关链接：<a href="https://developer.apple.com/news/?id=09222016a" target="_blank" rel="external">https://developer.apple.com/news/?id=09222016a</a></p>
<h2 id="Vapor"><a href="#Vapor" class="headerlink" title="Vapor"></a>Vapor</h2><p>Vapor 1.0 正式发布了，这是一个基于 Swift 的服务器端框架，感兴趣的朋友可以玩玩。<a href="http://vapor.codes/" target="_blank" rel="external">http://vapor.codes/</a></p>
<h2 id="有趣"><a href="#有趣" class="headerlink" title="有趣"></a>有趣</h2><p>最近 AppStore 的热门搜索出现了奇怪的词条，详见下面第三条，看不懂的别问我，我也不懂！请向老司机请教！</p>
<p><img src="http://ww2.sinaimg.cn/mw690/65dc76a3jw1f7zsq678yij20qo1bf410.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;是的，我又开始写周报了！主要是因为喵神不写周报了，加上我发现大家对写 iOS 技术周报这件事情似乎没什么兴趣。其实我觉得这是一个挺好的学习总
    
    </summary>
    
      <category term="iOS weekly" scheme="http://blog.devtang.com/categories/iOS-weekly/"/>
    
    
  </entry>
  
  <entry>
    <title>什么是爱 - 读《少有人走的路》</title>
    <link href="http://blog.devtang.com/2016/09/16/what-is-love/"/>
    <id>http://blog.devtang.com/2016/09/16/what-is-love/</id>
    <published>2016-09-16T15:04:36.000Z</published>
    <updated>2016-09-16T15:04:36.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/the-road-less-traveled-book.jpg">
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>爱是什么？这或许是一个永恒的话题。我很少从学校的传统教育以及家庭教育中获得这方面的知识。</p>
<p>我小的时候对于爱的解释，印象中的故事竟然都是来自是电影：一部是 <a href="http://baike.baidu.com/item/%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%8F%B7/6162581" target="_blank" rel="external">《泰坦尼克号》</a>，另一部是 <a href="http://baike.baidu.com/item/%E7%9C%9F%E7%88%B1%E8%87%B3%E4%B8%8A/1671898" target="_blank" rel="external">《真爱至上》</a>。《泰坦尼克号》的男主 Jack 为了心爱的人，放弃自己生存的机会，让我以为爱是一种牺牲。而在大学时看的《真爱至上》，电影中的 10 个故事，讲了各种各样爱的故事，有小朋友之间的爱，有情侣之间的爱，更有同性之间的爱。电影最后的一句台词给爱下了一个更广泛的定义：「Love actually is everthing.」，</p>
<p>我现在 30 多岁了，结婚了，也有了小孩，有些时候我觉得爱就一种亲情，但是又说不清楚。因为家庭生活中其实会有各种琐事，各种争吵，有些时候也会困惑，不知该如何处理。</p>
<p>还是要感谢李笑来老师，他推荐的这本 <a href="http://item.jd.com/11323419.html" target="_blank" rel="external">《少有人走的路》</a>，用更详尽的篇章，从一个学术的角度讨论了什么是爱。这本书的作者斯科特·派克是一个心理医生，在书中的第二部分，作者详尽分析了各种关于爱的行为，告诉我们什么样的行为是爱，什么样的行为不是爱。</p>
<h2 id="爱的定义"><a href="#爱的定义" class="headerlink" title="爱的定义"></a>爱的定义</h2><p>作者从他的角度，给爱下了如下的定义：</p>
<blockquote>
<p>爱，是为了促进自我和他人心智成熟，而具有的一种自我完善的意愿。</p>
</blockquote>
<p>这个定义非常有意思，完全不同于我们以前了解到的爱的描述，我们从中可以看到两个特征：</p>
<ol>
<li>爱可以使双方都获得心智成熟。这就像是杨过和小龙女的「双修」一样，是一种共同进步的互利行为。</li>
<li>爱是一种自我完善的意愿。我们都希望通过它获得心智的成熟，人格的独立。</li>
</ol>
<h2 id="爱的误解"><a href="#爱的误解" class="headerlink" title="爱的误解"></a>爱的误解</h2><p>弄清楚什么是爱是很难的，但是反过来，弄清楚什么不是爱相对来说容易一些，所以本书中分析了四种常见的错误的「爱」，分别是：坠入情网、依赖性、自我牺牲、（仅有）感觉。</p>
<h3 id="坠入情网"><a href="#坠入情网" class="headerlink" title="坠入情网"></a>坠入情网</h3><p>坠入情网不是爱。这可能是最常见的误区吧。年轻时的我们，由于荷尔蒙的分泌，对异性产生好感，进一步渴望和异性交往，然后坠入情网，最终啪啪啪以及结婚生子。作者认为坠入情网不是爱的核心理由是：坠入情网的 “爱” 不会持续太久，不管爱的对象是谁，早晚我们都会从情网的羁绊中 “爬出”。有一个词叫「七年之痒」，其实也是说这个道理。坠入情网这种爱更像是一种冲动和激情，随着时间会慢慢消退。</p>
<p>刚刚说到爱需要使双方心智变得成熟。但是坠入情网，惟一的好处就是消除寂寞。即便经由婚姻，使这一功用得以延长，也无助于心智的成熟。</p>
<p>悲观一点说，坠入情网其实是一种受人类本能控制的，来自我们 DNA 中繁衍需求的刺激。它的意义在于增加人类生殖机会，促进物种繁衍和生存。但是坠入情网其实是产生真正的爱的一个很好的媒介，后面我们再详细讨论。</p>
<h3 id="依赖性"><a href="#依赖性" class="headerlink" title="依赖性"></a>依赖性</h3><p>依赖性不是爱。我们会见到各种依赖性的行为，比如小孩对父母的依赖，妻子对丈夫的依赖，甚至父母对小孩也有依赖。一些小孩长大之后离开家门，父母会特别难受，但都会调整接受。如果一个父母因为对小孩有依赖，阻止孩子去外地上学或者工作，那么这种依赖性就不是爱了，因为它其实对孩子的发展并不有利。</p>
<p>反过来，父母的这种行为对于自己也是不利的，因为这也体现出他们的人格并不独立。总有一天，孩子还是会追求自由与不受控制，到时候父母也容易产生心理问题。</p>
<p>所以，过度的依赖行为其实使孩子和父母都丧失了人格的独立性，是不利于心智发展的，所以不是爱。</p>
<h3 id="自我牺牲"><a href="#自我牺牲" class="headerlink" title="自我牺牲"></a>自我牺牲</h3><p>自我牺牲不是爱。我们常常见到这样的行为：爷爷奶奶给孙子孙女买特别多的玩具，什么事情都惯着孩子，为了满足孩子的各种需求，甚至会牺牲一些自己的东西，例如金钱，健康，时间。这些牺牲如果是利于孩子身心发展的，那就是爱；如果最终使得孩子产生很坏的生活习惯和沟通方式，那么不但不是爱，还是一种伤害。</p>
<p>所以，自我牺牲的付出不一定是爱，还得看付出之后的效果是怎样的。</p>
<h3 id="感觉"><a href="#感觉" class="headerlink" title="感觉"></a>感觉</h3><p>爱，不是感觉。爱是一种行为，而不是一种感觉。如果你整天只是把爱挂在嘴上，但是并没有任何行为付出，那么其实这就不是爱。作者在书中指出，一些家庭的父母并不关心孩子的身心，只知道通过简单粗暴的方式来教育孩子，嘴上说是爱孩子，其实根本就没有付出真正上的行为。</p>
<p>作为父母，把孩子喂饱，提供教育相关的资金支持，仅仅是尽到了最基本的义务。而和孩子一起玩耍，交流，解决孩子的困难，纠正孩子的错误，关注和帮助孩子成长，才是更重要的行为。</p>
<h2 id="如何爱"><a href="#如何爱" class="headerlink" title="如何爱"></a>如何爱</h2><p>那么，我们应该如何去爱呢？作者介绍了一些原则：</p>
<ol>
<li>首先，爱与不爱最显著的区别之一，在于当事人的意识思维和潜意识思维的目标是否一致。</li>
<li>第二，爱是长期的和渐进的过程。爱是自我完善，意味着心智不断成熟。爱，能够帮助他人进步，也会使自我更加成熟。</li>
<li>第三，真正意义上的爱，既是爱自己，也是爱他人。爱，可以使自我和他人感觉到进步。不爱自己的人，绝不可能去爱他人。</li>
<li>第四，爱是自我完善，也是帮助他人完善。它意味着持续努力，超越自我界限。</li>
</ol>
<p>在以上原则下，作者提供了一些实践的办法：</p>
<ol>
<li>关注：爱最重要的体现形式，就是关注。体现关注，一种最常见、最重要的方式，就是 “倾听”。</li>
<li>自律：自律，是将爱转化为实际行动的过程。这里面涉及情绪的控制，我们既不能过于放纵情绪，也不能过于压抑情绪。</li>
<li>独立：爱的重要特征之一，在于爱者与被爱者都不是对方的附属品。付出真爱的人，应该永远把爱的对象视为独立的个体，永远尊重对方的独立和成长。</li>
</ol>
<p>最终，如果我们这么做，就会产生精神贯注的现象：</p>
<blockquote>
<p>真正的爱，是自我完善的特殊体验，跟自我界限有着密切关联。陶醉在爱的情感里，我们感觉灵魂无限延伸，奔向心爱的对象。我们渴望给对方滋养，我们希望对方成长。被自我界限之外的对象吸引，迫使我们产生冲动，想把激情乃至生命献给对方，心理学家把这样的激情状态，称为 “精神贯注”。我们贯注的对象，正是所爱的人或所爱的事物。</p>
</blockquote>
<h2 id="爱的风险"><a href="#爱的风险" class="headerlink" title="爱的风险"></a>爱的风险</h2><p>即便我们做到了真正的爱，但是也会面临一些风险：</p>
<ol>
<li>死亡的风险：精神贯注的代价之一，似乎是或早或晚你都要因为贯注对象的死亡或离去，让自己饱受痛苦的折磨。如果不想经受个中痛苦，就必须放弃生活中许多事物，包括子女、婚姻、性爱、晋升、友谊，但惟有这些事物，才能够使人生丰富多彩。</li>
<li>独立的风险：我们必须不再完全依赖任何人，成为一个人格独立的个体。</li>
<li>承诺的风险：我们需要具有责任感，承诺与爱相关的义务。</li>
<li>冲突的风险：我们需要面临与所爱的人的冲突，并且在冲突发生时，以帮助对方心智成熟作为出发点，来解决冲突。只有以爱为出发点，投入全部的情感，做出真挚的承诺，才能更好地滋养对方的心灵。例如，父母和孩子发生冲突时，首先应该自我检讨，认清自己的价值观，才能采取正确的方式，才能恰当地教育孩子。</li>
</ol>
<p>关于死亡的风险我深有感触。我现在 30 岁了，整个身体都不像 20 多岁那样有活力了，加班太晚会感觉特别累。我相信有一天，我会发现自己真的老了，不光精力大不如从前，可能视力，听力都退化了，那个时候我需要放弃很多年轻时获得的成就，但是这就是人生，所有人都逃避不了死亡。</p>
<p>关于冲突，我也有一些体会。我有时候在家里会抱怨一些事情，后来我发现，这除了让我和家人产生矛盾以外，完全无助于解决任何问题。所以我开始反思我是否应该用更加有效的方式来和家人沟通，试过几次之后，我发现家人也这些事情也有自己的看法。在冲突发生时，用诚实和谦逊的态度先自我反省，再进一步沟通，最终大家会学会到更好的相处方式。这确实也让我的心智更加成熟了，对情绪的控制（自律能力）更强了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><a href="http://item.jd.com/11323419.html" target="_blank" rel="external">《少有人走的路》</a> 让我对爱有了更客观的认识，一句话总结：爱就是一种精神贯注的行为，它可以使自己和对方的心智都成长起来，从而获得健全的人格。</p>
<p>但是作者也坦诚地说，这样的定义还是无法解释很多爱的行为，不过对于我来说，已经学到很多了，推荐给大家。以下是本书第二部分的思维导图总结：</p>
<img src="/images/the-road-less-traveled-mindnode.jpg">
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/the-road-less-traveled-book.jpg&quot;&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;爱是什么？这或许是一个永恒的话题。我
    
    </summary>
    
      <category term="books summary" scheme="http://blog.devtang.com/categories/books-summary/"/>
    
    
      <category term="books" scheme="http://blog.devtang.com/tags/books/"/>
    
  </entry>
  
  <entry>
    <title>打开你的脑洞</title>
    <link href="http://blog.devtang.com/2016/09/04/open-your-brain/"/>
    <id>http://blog.devtang.com/2016/09/04/open-your-brain/</id>
    <published>2016-09-04T14:20:11.000Z</published>
    <updated>2016-09-04T14:28:04.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/open-brain.jpg">
<h2 id="职业病"><a href="#职业病" class="headerlink" title="职业病"></a>职业病</h2><p>我的大学是在北京师范大学读的，当时读的一个叫做「励耘实验班」的专业（现在已经取消了），美其名曰第一年进行通识教育，第二年选专业。我最终选择了计算机专业，并且有幸和一群不同专业的室友一起生活了四年。</p>
<p>其中一个室友选了「数字媒体」专业，他在专业学习过程中，需要每天看各种电影，分析各种电影片段的拍摄手法。那个时候（03 年）网络还不发达，他有一个大书架，上面全是他买的各种电影光盘。有一次和他聊天，他说道：「我现在看电影已经无法融入剧情中了，因为我一看见电影，脑海里面想的就是当前的摄像机机位在哪里，用了什么拍摄手法，为什么导演要用这样的手法」。</p>
<p>有人把这种现场取一个名词，叫「职业病」，就像警察一样，不管有没有上班，都会下意识地观察有没有行为异常的路人。而我做为一个 iOS 开发者，每每试用一款新的 App，看到一些交互效果，第一想到的不是这个效果多酷，而是想这个效果是用什么技术方案做到的。</p>
<p>我以前觉得这就是「职业病」，但是突然有一天，我发现这还不是「职业病」这么简单的事情。</p>
<h2 id="脑洞"><a href="#脑洞" class="headerlink" title="脑洞"></a>脑洞</h2><p>事情的转折发生在我开始转型，从一个 iOS 开发，转变为一个团队管理者。我开始参与产品和 UI 的讨论。这个时候，我发现我开始关注技术实现之外的东西，拿到一款 App，我不但会考虑它的技术实现，也会考虑产品经理这么设计的意图，也会考虑用户使用这个功能的场景，还会考虑视觉设计的特点。</p>
<p>于是，我觉得这不是职业病，而是打开了另一个思考问题角度的脑洞。</p>
<p>就像我的室友打开了「艺术创业」的脑洞一样，他可以从各种电影中吸取到电影拍摄的专业知识，而我却对此完全不会有感受。同样，我使用一个 App 可以带来技术实现上的思考和提升，而我的室友却完全不可能有这方面的感受。</p>
<p>每一个脑洞的打开，都代表着一种新的观察世界的视角，以及这个视角下的思考、学习和积累。iOS 开发者由于需要大量地接触到终端用户，产品原型以及 UI 设计，本来可以学习和积累出大量的产品设计、交互设计 和 UI 设计的知识，但大部分 iOS 开发者在面对产品稿的时候，却只知道思考这个功能应该如何实现。这些 iOS 开发者只打开了技术实现的脑洞，无论他们做多少个 App，他们也无法得到产品设计上的提升。</p>
<p>另外有一些 iOS 开发者，他们喜欢和产品经理聊天，了解产品稿背后的设计意图，他们还会反馈给 UI 设计师一些 iOS 下的视觉规范。在一些产品设计非常难以实现的时候，他们会站在产品经理的立场上，提出不损害产品意图，又有更容易实现的技术折中方案。这些 iOS 开发者，不但打开了技术实现的脑洞，也打开了产品设计，视觉设计的脑洞。每一次 App 的开发过程，他们除了能够提升开发能力，还能提升产品设计和视觉设计能力。</p>
<p>服务器端的同学在这一点上，会吃亏很多，因为服务器端的同学大多数不需要接触 UI 稿，产品稿方面，他们的工作因为不涉及交互细节，所以也很容易忽视产品实现的细节。相对来说，他们更难以打开产品设计，视觉设计的脑洞。</p>
<h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p>每一个脑洞都代表着一种新的思考问题的角度。我现在管理小猿搜题产品技术团队，我开始越来越关注大家的工作流程，沟通方式是否顺畅，希望让每一个人都能舒服地工作，高效地产出。这个时候，我打开了管理的脑洞，我开始注意到大家的协作方式，注意到非正式领导的组织过程，注意到跨组协作的效率问题，注意到细节问题的处理过程。我会观察和思考这些事情，甚至会尝试给组织加入一些规则或增加一些沟通来改善一些问题，这想在这个团队中，很少有人会像我一样关注这些问题，所以他们也很难像我一样积累出团队管理经验。</p>
<p>当你理解了这件事情之后，你就可以打开更多的脑洞了，因为很多经验的积累，并不真正需要你全职去做，而只要你仔细观察就可以了。比如你可以打开 CTO 的脑洞，看看公司的 CTO 是如何管理整个技术团队的，你还可以打开 CEO 的脑洞，看看 CEO 在哪些问题上会向员工沟通，前几天，<a href="http://www.yunweipai.com/archives/9363.html" target="_blank" rel="external">《李大学：CTO，应该像 CEO 一样思考》</a> 其实讲的也是这个道理。你甚至可以打开餐馆老板的脑洞，观察公司楼下的各种餐馆的经营模式，哪些最后死掉了，哪些最后成功了。</p>
<p>作为一个普通 iOS 开发者，我们更应该打开的是自己上司的脑洞，看看你的老大（他或许是一个 iOS 团队负责人）是如何负责一个团队的。这样，你也可以学习到他需要哪些信息，他会怎么决策，从而有效地和他进行沟通，让他对你的工作满意。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>打开脑洞这个叫法是我自己发明出来的，你喜欢这个思考方式吗？</p>
<p>一旦你被我打开了「打开脑洞」的脑洞，你就停不下来了，好好享受从新视角观察世界的乐趣吧！</p>
<p>祝大家玩得开心！</p>
<p>如果你感兴趣，这儿还有我的另一个脑洞：<a href="/2016/07/20/programming-worlds-farmer-and-god/">《软件开发中的上帝模式与农民模式》</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/open-brain.jpg&quot;&gt;
&lt;h2 id=&quot;职业病&quot;&gt;&lt;a href=&quot;#职业病&quot; class=&quot;headerlink&quot; title=&quot;职业病&quot;&gt;&lt;/a&gt;职业病&lt;/h2&gt;&lt;p&gt;我的大学是在北京师范大学读的，当时读的一个叫做「励耘实验班」的
    
    </summary>
    
      <category term="summary" scheme="http://blog.devtang.com/categories/summary/"/>
    
    
  </entry>
  
  <entry>
    <title>人格化的公司</title>
    <link href="http://blog.devtang.com/2016/09/04/company-with-personality/"/>
    <id>http://blog.devtang.com/2016/09/04/company-with-personality/</id>
    <published>2016-09-04T13:19:39.000Z</published>
    <updated>2016-09-04T13:19:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="企业的品牌形象与管理者的品牌形象"><a href="#企业的品牌形象与管理者的品牌形象" class="headerlink" title="企业的品牌形象与管理者的品牌形象"></a>企业的品牌形象与管理者的品牌形象</h2><p>在过去，企业总是希望将企业品牌形象与企业的管理者的品牌形象区分开，因为一个长久的百年老店可能经历多次管理者的变更。IBM 就是一个例子，我们不记得 IBM 的 CEO，但是 IBM 在企业服务方面高质量的品牌形象还是深入人心的。</p>
<p>传统的企业这么做无可厚非，因为他们不希望企业的管理者由于健康或别的原因，给企业带来负面影响。在传统企业盈利模式和管理方式稳定的时期，聘用一个 “职业经理人” 一样的 CEO，对于企业来说风险也不大。</p>
<p>但是，现在的企业发展速度已经远远超过了过去。</p>
<h2 id="年轻公司的快速崛起"><a href="#年轻公司的快速崛起" class="headerlink" title="年轻公司的快速崛起"></a>年轻公司的快速崛起</h2><p>2005 年：全球市值最大的公司分别是通用电气，美孚石油，微软，花旗，沃尔玛，BP 能源，辉瑞，美洲银行，强生，汇丰银行。</p>
<p>到了 2015 年，全球市值前十公司：苹果，谷歌，微软，伯克希尔，美孚石油，亚马逊，Facebook，通用电气，强生，富国银行。从中我们可以看到像 Facebook 这类公司的快速崛起。</p>
<p>Facebook 2004 年成立，淘宝 2003 年成立，这些公司都花了不到 10 年的时间，就成为了估值上千亿美金的公司。飞速的发展速度，使得大家不再担心企业创始人的个人魅力与企业的品牌形象融合在一起。</p>
<p>而且，企业管理者的个人魅力和企业本身的品牌形象其实是有相互影响的叠加作用，当企业管理者在公众中具有光环效应时，对企业品牌本身也是一种无形的帮助。在现在的中国公司中，各种企业的创始人都会注意使用个人的魅力或人格，来给自己的公司产品宣传背书。</p>
<p>比如锤子手机的罗永浩，360 的周鸿祎，小米的雷军，乐视的贾跃亭。对于他们来说，企业的成功至关重要，能够有一个核心的 “代言人”，是更加利于产品宣传的。这个趋势也就是近年来才开始盛行，反观老牌的中国公司 BAT 以及门户网站网易搜狐新浪，他们的创始人都要低调得多。也就是说，创新型企业的快速发展，使得越来越多创业公司采用这样的策略。</p>
<h2 id="情感化认知"><a href="#情感化认知" class="headerlink" title="情感化认知"></a>情感化认知</h2><p>从用户认知方面，一个具象化的人格形象，是更加有利于消费者对于企业产生认知，并且生成情感联系的。大家对于罗永浩的认知是一个理想主义者，那么就可能会为 “情怀” 买单。很多消费者的消费都是 “非理性” 的，一款产品所传达出来的任何情感（例如环保，坚持不懈，创新精神，极客精神）都会吸引到消费者，让他们购买产品而表达和宣泄自己的情感。</p>
<p>人格化的企业形象，会更加利于情感联系的建立。传统企业会选择明星代言的方式来做这方面的事情，但是明星可能会过气或者有负面新闻，都会对企业带来影响。一家新成立的创业公司请明星代言需要付出巨大成本，从性价比来说，让公司创始人给公司 “代言” 会更加经济和有效。所以我们甚至看到了聚美优品的陈欧为自己产品 “代言” 的营销方案。</p>
<h2 id="人格化的新公司"><a href="#人格化的新公司" class="headerlink" title="人格化的新公司"></a>人格化的新公司</h2><p>在可以预见的未来，创业公司的创始人会更加注意使用社交媒体来树立个人品牌，然后利用个人品牌为自己的产品带来竞争力。今年正好是自媒体爆发的元年，我们看到了更多个人在垂直领域创业的故事，<a href="http://weibo.com/u/149691505" target="_blank" rel="external">罗振宇</a>，<a href="http://weibo.com/wenyi" target="_blank" rel="external">文怡</a>，<a href="http://weibo.com/u/3688920760" target="_blank" rel="external">凯叔</a>，<a href="http://weibo.com/cuiyutao" target="_blank" rel="external">崔玉涛</a>，他们的公司都发展得很快。</p>
<p>所以我相信，在未来的企业中，创始人的个人品牌会被进一步强化，而那些拥有个人品牌的创业者，除了在竞争中占据巨大的品牌宣传优势外，也能在消费者的心智中建立起一个「人格化」的公司形象。</p>
<p>让我们拭目以待。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;企业的品牌形象与管理者的品牌形象&quot;&gt;&lt;a href=&quot;#企业的品牌形象与管理者的品牌形象&quot; class=&quot;headerlink&quot; title=&quot;企业的品牌形象与管理者的品牌形象&quot;&gt;&lt;/a&gt;企业的品牌形象与管理者的品牌形象&lt;/h2&gt;&lt;p&gt;在过去，企业总是希望将企业品
    
    </summary>
    
      <category term="summary" scheme="http://blog.devtang.com/categories/summary/"/>
    
    
  </entry>
  
  <entry>
    <title>我们身边的技术人生 -《技术人创业攻略》</title>
    <link href="http://blog.devtang.com/2016/09/01/dev-level-up-stories/"/>
    <id>http://blog.devtang.com/2016/09/01/dev-level-up-stories/</id>
    <published>2016-09-01T14:02:34.000Z</published>
    <updated>2016-09-01T14:02:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>在这个信息爆炸的移动互联网时代，我们身边总会有一些技术圈的大牛出现，介绍他们的文章大多是以技术角度，描述他们的作品多么牛逼，而我们往往除了膜拜也无从知晓这些技术人的成长经历。</p>
<p>带着写一些「有趣」的技术人故事的初心，《技术人创业攻略》的作者张兰开始了她的乌托邦式的旅程。她从 2013 年开始，从 SegmentFault 的创始人高阳，开始了她的访谈之旅。当时张兰并没有工作，每篇访谈耗费她大量精力，最后都免费放到网上供大家阅读。</p>
<p>带着这样的初心，她一直坚持完成了 37 位不同年龄，不同技术领域，不同背景的技术人。在她的采访稿中，她以技术人的真实背景出发，试图揭示出这些人成功的原因。</p>
<p>这些被他采访的技术人里面，包括 SegmentFault 的创始人高阳，七牛云存储的创始人许式伟这些创业公司的 CEO，也包括擅长运营的前端领域的一姐田爱娜，也有深入开源社区，成为 Linux 内核核心贡献者的吴峰光，还有资本领域的天使投资人杨轩。我也有幸在一次阿里举办的技术沙龙上认识了她，继而成为了她笔下的一个技术成长故事。</p>
<p>因为张兰写的这些故事都很有趣，于是有出版社愿意将它出版成书，这就是《技术人创业攻略》。但是张兰的性格里面有着极强的「处女座」式的追求完美的情结。所以这本书整整花费了她将近一年的时间进行重新的内容梳理和再采访。</p>
<p>仅仅为了封面的设计，张兰就多次因为不满意而调整，最后还是找到了西乔设计封面（下图）才满意。此时西乔的公众号已经成为几十万粉丝的大号了，如果你还没有看过程序员的漫画，一定得关注一下：「神秘的程序员们」（coderstory）。</p>
<img src="/images/dev-level-up.jpg">
<p>最终在上个月，《技术人创业攻略》终于出版了。不过在本书出版的时候，张兰已经和她老公旅居到了加拿大，开始了一段新的生活。而张兰此时开始学习上了 JavaScript，打算成为了一个前端工程师。她的第一个小作品，是用 DFS 生成的一个迷宫，我专门看了看她的代码：<a href="https://github.com/Graciazl/RandomMazeGame/blob/master/script.js" target="_blank" rel="external">https://github.com/Graciazl/RandomMazeGame/blob/master/script.js</a>，整体的代码风格和结构完全不像是一个初学者。我想这就是我认识的张兰最好的描述：做什么事情都那么认真。</p>
<img src="/images/zhanglan-maze.jpg">
<p>最后我得到了张兰的授权，为大家附上《技术人创业攻略》书中节选的一篇内容。这是书中唯一一位受访的外国人：Dave Thomas，《程序员修炼之道》的作者，让我们看看在张兰笔下的大神是如何成长的。</p>
<hr>

<h2 id="Dave-Thomas：生命不息，编程不止"><a href="#Dave-Thomas：生命不息，编程不止" class="headerlink" title="Dave Thomas：生命不息，编程不止"></a>Dave Thomas：生命不息，编程不止</h2><p>Dave Thomas，是一位从业近 40 年的大神级人物，他和 Andy Hunt 于 1999 年合著的《The Pragmatic Programmer》（中文译名《程序员修炼之道》），是历史上最畅销的开发指南书籍，曾获得 Jolt 大奖，影响深远。Dave 是敏捷宣言的 17 位发起人之一，Ruby 语言的支持者和传播者，正是他对 Ruby 语言的传播，使 Ruby 逐渐成为与 Perl，Python 齐名的语言。2003 年，他和 Andy Hunt 成立了 The Pragmatic Bookshelf 出版公司，致力于出版软件开发相关书籍，并用开发软件的方式实现了图书出版业的重大突破。</p>
<p>Dave Thoma 是一位令人尊敬的大师，更是一位伟大的程序员。在近 40 年的从业生涯中，他从未间断过编程，并时刻保持旺盛的好奇心和探索新技术的热情。在 Ruby Conf China 2013 大会上，Dave 接受了技术人攻略的访谈邀请，并在回信中 100% 地肯定了技术人攻略 “传递技术热情” 的理念：</p>
<p>“I think your ideas about spreading passion are 100% correct. I would love to help spread this message.”</p>
<p>希望大师的访谈可以鼓励更多还在奋斗的程序员，技术人攻略也会继续把这种对技术的热爱传递给更多的人。</p>
<blockquote>
<p>技术人攻略：您从什么时候开始接触编程？编程带给了您什么样的乐趣？在不断超越自我的过程中，是否遇到过什么困难，是否曾有过想放弃的时刻呢？</p>
</blockquote>
<p>我初次接触编程是在 1972 年，那时我还在英国上高中。有一部分人提前完成了考试，在学校没有别的事情可做。正巧校园对面的科技学院开设了编程课，于是我们申请了参加这个一周两次的课程。</p>
<p>我最初打算学数学专业，但当我开始编程，我慢慢爱上了它。</p>
<p>那时候我用 Basic 语言，将代码敲到纸带上，通过一台 110 波特的调解器将数据传到大型机上运行。虽然如此麻烦，但我发现编程十分符合我的大脑的运作方式——我喜欢这种创造性和精确性兼备的体验。</p>
<p>从那时开始，我从未间断过编程。我十分确定——除非是在度假的时候，我生命中的每一天都离不开写代码。</p>
<p>我也常常会有感到艰难的时候，但每次考验过去之后，你的技艺都将更上一层楼。所有值得做的事情都是困难的，但克服这些挑战不仅会让你更强大，还会让你变得更加投入。</p>
<blockquote>
<p>技术人攻略：我们处在一个快速变化的时代，新的技术层出不穷，程序员应该如何保持和这个世界同步，持续提升自己的竞争力？</p>
</blockquote>
<p>想要跟上技术更新的速度越来越难。当我开始编程的时候，主要通过阅读书籍和杂志了解进展，但现在几乎每天都有新概念出现。</p>
<p>但事实上很多的新事物只是人们对旧东西的再发明。我们行业里的许多人，眼光只看向将来，对计算机的历史却知之甚少。这些人想要创造东西（当然是好的），但他们并不知道自己想做的东西在 20 或 30 年前已经实现了。</p>
<p>正因为如此，许多新生成的事物其实并没有那么新。对我来说，要跟上潮流就变得简单了，因为看到它们就会让我想起 “啊，这和 X 很像呢”。</p>
<p>但同时，也确实有一些不错的创新。我每个月总有那么一到两次，会遇到很有意思的东西，让我有兴趣去尝试一下。阅读技术内容是有趣的，但只有通过尝试才能认识得更加深入。</p>
<p>这很花时间，但对于程序员来说这种投入非常重要。如果不这么做，很快我们就会被淘汰。</p>
<blockquote>
<p>技术人攻略：在大公司里，职位被划分得很细，例如前端、后端、运维、数据库等，程序员被固定在了公司设定的职位上，您认为程序员应如何提升技术的广度和深度？</p>
</blockquote>
<p>专业化分工属于昆虫世界。真正能够改变世界的人：他们具备更加广泛的能力，并能将不同的技术结合起来创造价值。</p>
<p>我认为很多公司并没有意识到这点，他们更乐于创造层级制度和把员工限制在某个职位上。</p>
<p>但是也有些不一样的公司，懂得通过制定目标和提供指导让程序员有最好的产出，而不是监督所有的细节。这些公司理解一个优秀的程序员可以同时胜任数据库设计、规划应用部署，也许还喜欢解决技术支持方面的问题。</p>
<p>我鼓励年轻程序员获取一些在不同的公司工作的经验，以寻找适合自己的工作方式。例如试试在大公司和在创业团队工作有什么不同，甚至尝试下独自工作。一旦你了解了自己适合的方式，就可以找到或者创造出合适的职位，让自己做得更好。</p>
<p>作为一名员工，很容易抱怨自己的公司，或者怀有这样的想法 “我就是一个普通人，没有能力改变什么”。但事实上，你有责任作出改变——让事情变得更好。这种责任不仅是对公司的，而且也是对自己的。看看你是否能让公司有所改变，如果无法改变现状，那么你应该换一个更适合自己的环境。</p>
<blockquote>
<p>技术人攻略：《The Pragmatic Programmer》影响了非常多的人，如果这本书出修订版，您打算做哪些改变？今天，一个讲求实效的程序员正在做些什么？</p>
</blockquote>
<p>我和 Andy Hunt 常常会讨论这件事。实际情况是，虽然书上的案例看上去古老了一点，但背后的概念仍然很适用。无论你是做 C++ 还是 Javascript 编程，DRY（注：DRY 即 Don’t Repeat Yourself，不要重复自己）原则仍然适用:)</p>
<p>我个人认为可以修改或者去掉一些小的 tips，但没什么大问题。</p>
<p>如何做一个高效的程序员：do what works, and work at what to do。“do what works” 意味着你应该不断问自己 “我正在做的事情有什么样的价值？”，每天都尝试寻找提升所做事情价值的方法。“work at what to do” 意味着要时常回顾，从全局角度看问题，并且寻找改进工作的新方法。</p>
<blockquote>
<p>技术人攻略：您是一名技术高手，又拥有自己的软件公司，您觉得程序员应该创业吗？程序员创业有哪些优势和劣势？</p>
</blockquote>
<p>这是一个很棒的问题，但我也还不知道答案。</p>
<p>我的一个弱点在于我喜欢让事情保持简单——我认为大多数程序员都喜欢这点。但现实世界——公司运作的世界，并不简单。我不得不克服把事情过度简单化的诱惑，因为我知道这样会让自己错失机会。</p>
<p>我认为程序员从事商业，最重要的强项在于我们懂得事物的关系如何。管理代码的原则，同样可以用在管理公司上，这也是 The Pragmatic Bookshelf 这家出版公司成功经营的原因之一。我们在一开始的时候，并不知道图书出版公司该如何运行，所以我们采用了管理软件公司的方式去产出图书，而不是产出代码。结果，我们将版本控制、持续系统构建，以及全自动化等方式运用在了商业运营的方方面面。其它出版商无法做到这些，我们对于出版行业的无知成为了最大的优势。</p>
<blockquote>
<p>技术人攻略：在 Ruby 大会上听说您最近在关注一门新语言 Elixir，它为什么吸引您？您会像推广 Ruby 一样去推广这门语言吗？它是否代表了接下来的技术流行趋势？</p>
</blockquote>
<p>我非常确信未来的世界属于并行和分布式，五年之内，还要编写一个从头到尾顺序化执行的程序，这将是一个笑话。</p>
<p>但同时我们并没有拥有真正可以让我们创建分布式和并行系统的工具，用 Ruby 或 Java 写并行代码很容易出错，用 Javascript 也同样痛苦。</p>
<p>Erlang 诞生差不多 25 年了，这种语言的目的就是要进行分布式和并行编程，就是解决大规模和可靠性问题——在后者的环境中，要保持代码一直处于运行状态，即使代码在升级时也是如此。</p>
<p>Elixir 则没有这个问题，这种语言看上去跟 Ruby 很像，非常易于理解和编写。但是它运行在 Erlang 虚拟机上，这意味着它可以获得 Erlang 的一切好处。同时又可以胜任 Erlang 完成不了的任务，它有很强的元编程能力、宏和协议等方面也不错。</p>
<p>Elixir 会统治世界吗？可能不会。但我认为它代表了未来的方向。学习 Elixir 的过程可以让我理解未来的编码方式。五年后我可能不会用 Elixir，但我十分确信我会用一些类似的语言，我通过 Elixir 学到的东西仍然可以帮助我。</p>
<p>这听上去好像是我认为 Elixir 不会流行，但其实我不这么想。到目前为止，Elixir 是我们所拥有的最好的语言和运行时之一。当我没有为（由 Ruby 编写的）已有系统写代码的时候，我会用 Elixir 开发，我十分喜欢它。</p>
<p>我鼓励其他程序员试试 Elixir(或者其它类似的语言)，我总是鼓励程序员去学习更多的东西。</p>
<blockquote>
<p>技术人攻略：在移动互联网时代，产品的开发模式和以前互联网时代相比，有哪些新特点？</p>
</blockquote>
<p>我认为程序员面对的世界和五年前相比有了显著的变化。浏览器基本上还和 IBM 将老式 3270 终端连到主机上的应用一样——你向它发送数据，用户输入一些东西，然后浏览器给出回应。还是以服务器为主。我知道：客户端在不断加入很多令人头痛的东西，比如 JavaScript 应用什么的，但是整体架构仍然一样。我认为浏览器技术基本上已经进入死胡同。我观察身边的人——他们在手机和平板上使用 App，只有在必须用到浏览器的时候才会用一下，移动世界是以用户为核心，而非以服务器为核心的。</p>
<p>在移动 App 上，客户端掌管一切，服务器仅仅作为资源提供方。这要求程序员掌握一些新的技能和技术支持这种结构。在客户端，我们需要通过编写复杂的，异步的应用，并且将这些应用运行在一系列不同的设备上（不仅是手机和平板）。在服务器端，我们需要从 Rail 风格的应用转向更灵活、更多以联合方式运行的架构。（这正是 Elixir 令人兴奋的原因之一。）</p>
<blockquote>
<p>技术人攻略：去年的 Qcon China 上，您谈到了敏捷的腐化和到底什么是敏捷，有没有哪些软件项目领域，是敏捷开发模式不适用的？</p>
</blockquote>
<p>你的问题认为，“敏捷” 是一种东西。</p>
<p>真相是，“敏捷” 并不存在。它不是一种 “东西”，不是一个名词。人们是把它当成一个名词开始用起来的，但是他们并不理解背后的含义。</p>
<p>“敏捷” 不是一种东西，敏捷是一个形容词——它描述了一种东西。你可能有一个敏捷的团队，或者一种敏捷的过程，但你却从来不是 “敏捷”。</p>
<p>这是什么意思？这意味着那些向你硬推 “敏捷” 这个名词的人在撒谎，因为 “敏捷” 是买不来的。</p>
<p>相反，敏捷是因人而起的——它来自于那些希望把事情做得更好的个体。这些个体观察如何做事，并寻找改进事情的方法。Kent Beck 说这需要勇气，他说得没错。每当你尝试做出改进，你都在尝试改变现状，你将直面风险，你挑战了那些和你共事的人，他们也会用挑战来回敬你。</p>
<p>但是，我认为：在任何环境下，这些挑战和相关的讨论都是合适的。</p>
<blockquote>
<p>技术人攻略：您接触过中国的程序员吗？您觉得他们和西方的程序员有哪些区别？</p>
</blockquote>
<p>我喜欢来中国的原因之一，就是可以和这里的程序员交流。</p>
<p>这次的中国之行，我们在一家创业孵化咖啡馆（注：车库咖啡）渡过了非常愉快的一段时光。大家的活力和热情让我和我的妻子非常震惊，她甚至还为此写了一一篇博客。</p>
<p>西方的程序员也拥有这样的热情，但我在中国遇到的程序员表现出更多东西。或许是因为中国程序员要在更困难的环境下工作，又或许是因为中国的市场正开始爆发。不管是因为什么，我总能从中国程序员身上感到更多能量。</p>
<p>中国同时还有另外一类程序员，我在和他们谈话的过程中注意到，他们把工作当成任务。或许在家庭的推动下进入这个可以获得一份 “好” 工作的行业，或许想在一个大型机构里寻求安全感。不管是出于什么原因，这类程序员身上都缺乏激情，缺少一份对他们所作事情的热爱。这令人伤心，因为写程序真的是一件非常有成就感，非常让人满足的事。我建议这些程序员们看看我妻子的那篇博客上的照片，问问自己是否也愿意加入其中，是否愿意向桌子对面的人分享自己的新想法？<br>他们可以做到——任何人都可以做到。</p>
<p>采访时间：2013 年 11 月 7 日</p>
<h2 id="附：Dave-Thomas-妻子的博客文章——The-Future"><a href="#附：Dave-Thomas-妻子的博客文章——The-Future" class="headerlink" title="附：Dave Thomas 妻子的博客文章——The Future"></a>附：Dave Thomas 妻子的博客文章——The Future</h2><p>晚餐过后，大会组织者将我们带到了一个创业孵化器——一家大型的互联网咖啡馆，年轻的中国技术创业者们在这里工作、和投资人会面、推销想法、编写代码——这些事情都同时进行。这一切简直是太赞了！星期天晚上的 11 点，我们走进了这个灯光昏暗、大堂几乎没有家具的路边办公室。穿过后门，上了楼梯，直接加入了充满创业热情的人群。我们比房间里的人年长得多，他们有着令人惊叹的能量，几乎所有的人都在参与创业项目。他们出来聊天，碰撞想法，并马上付诸实践。Dave 被包围了，起先，我以为他们是在寻求某种投资。但并不是——我彻底错了。我们听到，并不断听到，想投资他们的人比他们需要的多得多。他们想了解 Dave 对自己创业项目的看法，他的祝福和他的批评——他们十分投入，期待成功。他们想有所成就，而且他们每个人都有非常棒的，独特的事业。</p>
<p>在一个角落里有一台 3D 打印机——正在做一个脊椎。另一个大的角落作为演示区域，配置好了笔记本的投影。后面的墙上是一组技术书架（他们向我们保证，有许多 Pragmatic 出版的书）。这里的环境是随性而自然的——桌椅随意摆放，人们可以根据讨论需求随意组合。</p>
<p>这些年轻人了解各个层面的知识，不仅仅是技术上的。他们理解在开曼群岛上注册公司、天使投资以及 IPO，3D 打印机旁的电脑连着 Kickstarter。这些人聪明、热情，并且很努力，一点也看不到懒惰、傲慢以及理所当然的态度。<br>还有来自香港和台湾的年轻人，他们认为中国大陆才是做事的地方。</p>
<p>我对此毫不怀疑——他们说得很对。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这个信息爆炸的移动互联网时代，我们身边总会有一些技术圈的大牛出现，介绍他们的文章大多是以技术角度，描述他们的作品多么牛逼，而我们往往除了膜拜也无从知晓这些技术人的成长经历。&lt;/p&gt;
&lt;p&gt;带着写一些「有趣」的技术人故事的初心，《技术人创业攻略》的作者张兰开始了她的乌托邦式
    
    </summary>
    
      <category term="books summary" scheme="http://blog.devtang.com/categories/books-summary/"/>
    
    
      <category term="books" scheme="http://blog.devtang.com/tags/books/"/>
    
  </entry>
  
  <entry>
    <title>谈谈程序员的软技能</title>
    <link href="http://blog.devtang.com/2016/08/22/soft-skills/"/>
    <id>http://blog.devtang.com/2016/08/22/soft-skills/</id>
    <published>2016-08-22T13:49:52.000Z</published>
    <updated>2016-09-04T14:32:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近读到一本有意思的书，叫：《软技能：代码之外的生存指南》，这是一本相当跨界的书，内容除了介绍了技术人的职业发展之外，还涉及了自我的营销、学习方法、生产力、健身、甚至还包括理财。应该说，每一个章节都是非常有意思的，值得每一个程序员学习的内容。</p>
<img src="/images/soft-skills-mindnode.jpg">
<p>《软技能》一书的内容分为以上这些章节，我也按这些章节讲讲自己的感悟吧。</p>
<h2 id="职业"><a href="#职业" class="headerlink" title="职业"></a>职业</h2><p>职业一章介绍了程序员的面试，晋升，离职，远程办公，自由职业，以及创业。不管做什么事情，专业性总是第一要点。就像书中写的那样，我们应该成为「专业人士」，这就要求我们对所做的工作始终精益求精。这其实与行业无关，职业精神在任何行业都应该俱备。</p>
<p>在程序员这个行业，我们的职业精神在于追求代码的美，这包括架构的可扩展，命名的规范，合理的注释，合理的设计模式。但其实，我们最最欠缺的职业精神是：按时发布产品。</p>
<p>我们总有无数的借口：未知的技术挑战，没有遇到过的 Bug，产品需求的变更，相关联调人员的问题，但是好的程序员，总是能够在各种风险发生时，通过自己的努力保持按时上线。</p>
<p>在这一点上，越是大公司的程序员，反倒由于大公司病的影响，职业精神就越差。</p>
<h2 id="自我营销"><a href="#自我营销" class="headerlink" title="自我营销"></a>自我营销</h2><p>100 个程序员里面，有 99 个不会营销，这还是乐观的说法。而我就是那个稍微会点营销的人，我从中享受到的红利已经多得超过我实际的付出了，弄得我自己都不好意思。我常常给别人说，我不是大牛，我只是喜欢分享而已。不过话说回来，一般喜欢分享的人水平都差不到哪儿去，为什么呢？因为他如果分享的内容有问题，就会被人指出来，那么他就会很快得到纠正。他如果分享的内容没问题，就会被高手看到找上门来交流，那么他就多了一个高水平的相互学习讨论的人。所以对于分享者来说，分享行为总是好事。</p>
<p>在中国如何做自我营销呢？基本上做到两点就可以了：</p>
<ol>
<li>写技术博客。</li>
<li>发技术微博。</li>
</ol>
<p>写技术博客好难啊怎么办？可以从翻译国外博客开始。发技术微博好难啊怎么办？可以从转发技术微博开始。看看 JSPatch 的作者 bang，人家从 10 年前就写博客了，能写不好吗？</p>
<p>切忌把时间花在混各种圈子，包括 QQ 群、微信群、各种技术论坛，这对自我营销效果基本没有，而且还很花费时间。</p>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>很多人问我：「唐巧，我参加完培训班找不到工作怎么办啊」，因为移动互联网的泡沫，今年 iOS 新人太多，我也不知道怎么办，但是学习肯定不是参加完培训班就结束了的。</p>
<p>程序员必须具备自我学习的能力，而自我学习的能力第一步，就是书中第 27 章讲的「学习如何学习」，我们把它叫做元学习吧。一个学习者，应该俱备一种通用能力，就是遇到一个新知识的时候，能够有一套方法，能够迅速地学习掌握这门新知识。</p>
<p>在这个快速变化的时代，编程语言以及开发生态都在不停迭代升级，像 iOS 开发更是经历着从 Objective-C 向 Swift 的巨大迁移。处于时代中心的我们，没有元学习能力，如何获得竞争力？难道你工作之后，还要给企业老板说：我要请三个月假报一个培训班，学习 Swift ？</p>
<p>回到刚刚说到的问题，如果你参加完培训班找不到工作，只有更加努力地多积累 iOS 开发知识，尝试让自己的能力变得更强，可以尝试自己接个外包，或者自己写一些开源组件，或者找一份实习，都是一些可能的方法。iOS 新人的市场竞争非常激烈，除了自己比别人花更多时间和精力之外，没有什么捷径。</p>
<h2 id="生产力"><a href="#生产力" class="headerlink" title="生产力"></a>生产力</h2><p>作者介绍了许多办法提供自己的工作效率，里面也提到了我以前介绍过的 <a href="/2016/04/12/tomato-time-management/">番茄工作法</a>。</p>
<p>我自己对于生产力的理解在前两天的 <a href="/2016/07/20/programming-worlds-farmer-and-god/">《软件开发中的上帝模式与农民模式》</a> 文章中也提到了，效率方面的生产力，其实都是提升自己的农民模式。</p>
<p>本书中提到的任务分解，计时，培养习惯都是不错的实践方法。</p>
<h2 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h2><p>本章中我们看到了一个外国程序员对于买房和期权的理解。我个人感觉和中国的国情还是有一些差距。</p>
<p>在中国，我和小伙伴们在过去 5 年中很遗憾地发现，工资还没有房价涨得快。身边好几个朋友经历了自己买的房子暴涨几百万的情况，还是挺吓人的。</p>
<p>期权方面，国内的国情和国外也不一样，小道信息的作者 Fenng 最近似乎也在这方面遭遇了一些困惑，我其实之前也在这方面遇到一些问题。关于期权，稍后我也会另外撰文分享我的观点。</p>
<h2 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h2><p>有人说程序员是最适合当老公的，因为社会关系简单，薪水高，死得早。。。。</p>
<p>健身这件事情被无数人挂在嘴边，却坚持不下来。其实这件事情还是看个人对于延迟满足感的控制，像我前段时间，就坚持了四个月健身，不但学会了自由泳，而且达到了一次游 1000 米。我现在 1000 米的成绩是 29 分钟，我打算继续坚持下去，每个月减少 1 分钟。</p>
<h2 id="精神"><a href="#精神" class="headerlink" title="精神"></a>精神</h2><p>作者在本章中讲了一些积极的人生观，嗯，其实就是鸡汤。身子虚的同学可以补补。</p>
<h2 id="最后（活动已结束）"><a href="#最后（活动已结束）" class="headerlink" title="最后（活动已结束）"></a>最后（活动已结束）</h2><p>送书活动来啦，为了庆祝人民邮件出版社异步社区成立一周年，iOS 开发与异步社区联合发起评论赠书活动。</p>
<p>赠书规则如下：评论留下你关于软技能的想法，我将从评论的读者中选出 5 位读者赠送此书。</p>
<p>本次活动最终获奖的是：Thank立言、Julin、yeafel、OSong、破船。选择他们的理由包括：留言质量较高、经常与我互动留言（微信后台现在可以查到大家的互动次数）。奖品有限，希望没有获得的小伙伴别在意～</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近读到一本有意思的书，叫：《软技能：代码之外的生存指南》，这是一本相当跨界的书，内容除了介绍了技术人的职业发展之外，还涉及了自我的营销、学习方法、生产力、健身、甚至还包括理财。应该说，每一个章节都是非常有意思的，值得每一个程序员学习的内容。&lt;/p&gt;
&lt;img src=&quot;/
    
    </summary>
    
      <category term="books summary" scheme="http://blog.devtang.com/categories/books-summary/"/>
    
    
      <category term="books" scheme="http://blog.devtang.com/tags/books/"/>
    
  </entry>
  
  <entry>
    <title>小青和他的 RxSwift 课程</title>
    <link href="http://blog.devtang.com/2016/08/13/xiaoqing-and-rxswfit-course/"/>
    <id>http://blog.devtang.com/2016/08/13/xiaoqing-and-rxswfit-course/</id>
    <published>2016-08-13T03:31:11.000Z</published>
    <updated>2016-08-13T03:31:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xil0e.com1.z0.glb.clouddn.com/teacher/57908b8961854.png" alt=""></p>
<p>第一次认识小青（<a href="http://weibo.com/u/2314535081" target="_blank" rel="external">@靛青K</a>），是在他与梁杰一起创办的 <a href="http://t.swift.gg/" target="_blank" rel="external">T 沙龙</a>聚会上。当时小青邀请到了代码家，给大家介绍了函数式编程的一些内容。T 沙龙的模式很有意思，它强调纯线下的、小范围的、免费的交流。这与现在这个强调规模与经济的互联网时代格格不入，但是不可否认的是，小青和梁杰办得很成功。就在上一次分享会中，小青邀请到了 <a href="http://weibo.com/u/2157980617" target="_blank" rel="external">@txx</a> 和 h4x 为大家分享逆向，特别是 txx 现象从头到尾演示一个 App 被逆向的过程让我对逆向的实践有了更多的了解。</p>
<p>沙龙的茶歇期间的闲聊，我才了解到小青还未大学毕业，但是他已经在 Enjoy 开始了他的第二份实习，而这份实习中，他将会用 RxSwift 重构 Enjoy 的众多模块。我私下问他为什么选择 Enjoy，他毫不犹豫地说：「因为可以用 RxSwift 呀！」。其实这也从一个侧面反映出，业界对于 RxSwift 以及比 RxSwift 更早的 ReactiveCocoa 都处于观望的心态，真正勇于尝试的并不多。</p>
<p>为了学习和推广 RxSwift，小青也花了大量的精力，比如他发布了大量 RxSwift 的教程在 <a href="http://t.swift.gg/t/rxswift-course" target="_blank" rel="external">SwiftGG网站</a>  和<a href="https://medium.com/@DianQK" target="_blank" rel="external">他的博客</a> 上。今年初，小青也成为了 GMTC 2016 全球移动技术大会 Swift 专场讲师，为大家分享了 RxSwift。另外他也在编写一本 RxSwift 的书，预计年底将会出版。</p>
<p>与此同时，小青也在 StuQ 开设了一门 RxSwift 在线直播小班课，这个课程当前处于报名阶段，预计 8 月下旬开课。这个在线直播课程限 60 人，感兴趣的同学可以查看这里的<a href="http://www.stuq.org/my/courses/study/1062" target="_blank" rel="external">详细介绍</a>，你可以说这是一个广告，也可以说这是一个推荐，反正我自己是报名了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xil0e.com1.z0.glb.clouddn.com/teacher/57908b8961854.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;第一次认识小青（&lt;a href=&quot;http://weibo.com/u/2314535081&quot;
    
    </summary>
    
      <category term="iOS" scheme="http://blog.devtang.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>谈谈 T 型人才</title>
    <link href="http://blog.devtang.com/2016/08/13/talk-about-full-stack/"/>
    <id>http://blog.devtang.com/2016/08/13/talk-about-full-stack/</id>
    <published>2016-08-13T03:10:25.000Z</published>
    <updated>2016-08-13T03:11:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="「全栈」工程师"><a href="#「全栈」工程师" class="headerlink" title="「全栈」工程师"></a>「全栈」工程师</h2><p>前一段时间，「全栈」工程师的概念很火，不过大多数时候，「全栈」工程师指的是一个人同时写 Web 前端和后端，顶多加上一些运维工作。通常情况下，我很少见到一个人能够同时写 Web 前端 + 后端 +iOS 端 +Android 端。</p>
<p>在猿题库（我们现在改名叫猿辅导了）创业初期，我曾经试图同时写 iOS 和服务器端，但是我很快就放弃了。因为当时服务器端的代码量还是很大，同时有好几个人在编写。有些时候我需要加逻辑时，会涉及到他们的代码修改，这个时候我就会需要花费额外的精力来看懂他们原来的逻辑。</p>
<p>当时正值创业初期，我们的 Code Review 并不严格，代码的相关设计文档也不多，我只能通过阅读源码来跟上另外几个服务器端开发同学的逻辑。很快我就放弃了，因为在创业阶段，效率是第一位的，同时做 iOS 和 服务器端，使得我在服务器端不够专注，效率变得低下。</p>
<p>从那之后，我就意识到，「全栈」工程师可能最适合的场景就是 Web 前端 + 后端的偏前端的逻辑。因为那个场景下，前端工程师可以省掉沟通接口的时间，也可以自己统一前后端的模版，甚至他可以尝试统一语言，同时用 JavaScript 写前后端（在后端使用 nodejs）。</p>
<p>而在别的职位上，是很不适合全栈的，因为这样工作产出会下降。</p>
<h2 id="T-型人才"><a href="#T-型人才" class="headerlink" title="T 型人才"></a>T 型人才</h2><p>那我为什么又想聊 T 型人才呢？是因为我觉得 T 型人才和全栈不一样。在我看来，T 型人才有一门自己擅长和精通的语言，同时又有足够宽的视野，使得他在合作的时候，能够更多地站在对方的立场上考虑问题。</p>
<p>打个比方，做过服务器端开发的同学，再转而做客户端开发，就会更加注意 Restful 接口的设计合理性。相互之间协商接口时，知道什么样的方式服务器端好实现，什么样的方式不好实现，然后定出来的接口就会让对方非常舒适。</p>
<p>与此同时，T 型人才对于自己理解和学习新东西，也是有很大帮助的。我之前做过 Java 语言的服务器端开发和 JavaScript 语言的前端开发，之后才转做 iOS 开发。各种语言和开发环境接触多了就发现：其实很多概念都是相通的。我想我之所以当时学 iOS 开发上手那么快，也是由于在别的语言上有积累。</p>
<p>其实对于移动开发来说，iOS 和 Android 也有很多相同的概念，比如 iOS 的 UIViewController 和 Android 的 Activity。当然，它们也有很多不同的技术细节，比如对界面排版设计，iOS 因为设备屏幕单一，所以刚开始选择了简单的绝对定位，后面选择了 size class 的方式。而 Android 因为屏幕分裂严重，所以选择了更加流式的排版设计。</p>
<p>iOS 因为追求界面的流畅和性能，选择了引用计数这种相对麻烦的内存管理方式，而 Android 因为需要借力 Java 语言本身的生态和苹果竞争，所以采用了垃圾回收这种会带来潜在卡顿风险的内存管理方式。<br>每年的 Google IO 大会出现的新技术，并不比 WWDC 逊色。今年 iOS 10 的一些改进，也看到了不少 Android 的影子。</p>
<h2 id="如何成为-T-型人才"><a href="#如何成为-T-型人才" class="headerlink" title="如何成为 T 型人才"></a>如何成为 T 型人才</h2><p>那么如何成为 T 型人才呢？我们老大郭常圳想了一个办法：轮岗。轮岗的意思是，当你成为某一方面的专家后，跳出自己的舒适区，转而到一个新的技术领域从头学起。</p>
<p>在我们公司，很多早期员工都经历过轮岗。比如我曾经从服务器端转到前端和 iOS 端，也是轮岗这个激励带动的。yangyz 从服务器端转到 Android，xuhf 从 Android 转到服务器端，zhangyc 从 Web 前端转到后端。每一个轮岗工作，都是对我们极大的挑战，但是让我们都成长为 T 型人才。</p>
<p>但是，轮岗的意思绝不是做一个技术方向「三心二意」，每一次转换技术方向，都应该是对前一个技术方向至少做到熟练掌握的程度才行，而我自己觉得，不经过一到两年的实践，很难称作熟练掌握。所以，轮岗的行为应该是低频的，而且是面向那些最优秀的开发者的。</p>
<p>这一点有点像大学的换专业，在我们学校，大一的学生可以在一学期后申请换专业，但是前提是这个同学在愿专业成绩达到前 10%。</p>
<p>换专业和换技术方向一样，机会只会给做得最好的人，公司不会因为一个人在 iOS 开发上做得不好，就把他轮换到别的开发岗位。</p>
<h2 id="创业初期"><a href="#创业初期" class="headerlink" title="创业初期"></a>创业初期</h2><p>在创业初期，很多时候技术创始团队由于缺人，每个人都是多面手。上次一个朋友说，他自己完全了服务器和网站的开发，然后又自己开发了 iOS 和 Android 端，实现了真正的「全栈」。</p>
<p>对此，我完全不否认有这样的人存在，而且我认为创业初期这么做也是完全合理的。因为创业初期重要的是做出东西，而招不到人的情况下，自己动手干是最简单直接的方式。</p>
<p>我想我更想表达的是一个词：效率。举个例子，假如这个创业公司做大了，变成 20 人的技术团队时，你会让每个人都同时做服务器，iOS，Android 开发呢，还是每个人只做某一方面？我想从效率上讲，每个人只做某一个具体的平台，效率是最大化的。这其实就是我想表达的，「全栈」工程师在理想情况下，并不是高效运作的公司期望的，只有某些特别情况下，「全栈」才有它存在的理由。</p>
<p>但是反过来，T 型人才是每个公司都期望拥有的，因为这样的人才视野更广，学习能力更强，沟通时会从对方角度考虑技术方案，甚至在某些技术方向没落之后，也会迅速地成功转型，这才是互联网公司理想的人才。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;「全栈」工程师&quot;&gt;&lt;a href=&quot;#「全栈」工程师&quot; class=&quot;headerlink&quot; title=&quot;「全栈」工程师&quot;&gt;&lt;/a&gt;「全栈」工程师&lt;/h2&gt;&lt;p&gt;前一段时间，「全栈」工程师的概念很火，不过大多数时候，「全栈」工程师指的是一个人同时写 Web 前端
    
    </summary>
    
      <category term="summary" scheme="http://blog.devtang.com/categories/summary/"/>
    
    
      <category term="startup" scheme="http://blog.devtang.com/tags/startup/"/>
    
  </entry>
  
  <entry>
    <title>如何用 Git 将代码恢复到一个历史的版本</title>
    <link href="http://blog.devtang.com/2016/08/06/revert-to-target-commit-with-git/"/>
    <id>http://blog.devtang.com/2016/08/06/revert-to-target-commit-with-git/</id>
    <published>2016-08-06T09:39:43.000Z</published>
    <updated>2016-08-09T07:37:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>有些时候，在一些特殊情况下，我们需要将代码恢复到一个历史的提交版本上。而这个历史提交版本，离最新的提交已经比较久远了。</p>
<p>比如，我希望将如下的仓库的提交，恢复到上上上上次提交。当然，我可以一次一次的 revert，但是有没有更快更简单的办法呢？</p>
<img src="/images/git-revert-1.jpg">
<h2 id="暴力的方式"><a href="#暴力的方式" class="headerlink" title="暴力的方式"></a>暴力的方式</h2><p>如果你的仓库是自己在用（不影响别人），那么你可以使用 <code>git reset --hard &lt;target_commit_id&gt;</code> 来恢复到指定的提交，再用 <code>git push -f</code> 来强制更新远程的分支指针。为了保证万一需要找回历史提交，我们可以先打一个 tag 来备份。</p>
<p>对于刚刚的例子，需要执行的命令就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// 备份当前的分支到 backup_commit</div><div class="line">git tag backup_commit</div><div class="line">git push origin backup_commit</div><div class="line">// 重置 source 分支</div><div class="line">git reset --hard 23801b2</div><div class="line">// 强制 push 更新远程分支</div><div class="line">git push origin source -f</div></pre></td></tr></table></figure>
<h2 id="温和的方式"><a href="#温和的方式" class="headerlink" title="温和的方式"></a>温和的方式</h2><p>如果你的仓库是多人在协作，那么你这么操作会使用别人本地的代码库混乱，所以只能建一个新的提交，这个新的提交中把想取消的提交都 revert 掉，那么具体应该如何做呢？方法如下：</p>
<p>首先，和刚刚一样，用 <code>git reset --hard 23801b2</code> 将代码切换到目标提交的 id。接下来，用 <code>git reset --soft origin/source</code> 命令，将当前代码切换回最新的提交。</p>
<p>执行完上面两步后，你的仓库还是最新的提交，但是工作区变成了历史的提交内容，这个时候用 <code>git add</code> 和 <code>git commit</code> 即可。最终完成的效果如下：</p>
<img src="/images/git-revert-2.jpg">
<p>不过经过念茜的提醒，该方法需要保证 reset 的时候没有别人做新的提交，如果有的话，会一并把别人的提交也撤销了。所以还是挺危险的，慎用。</p>
<p>虽然用到的时候很少，但是理解它的原理有助于大家理解 Git 的工作区，暂存区和版本库的各种指针操作的意义，希望对大家有用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;有些时候，在一些特殊情况下，我们需要将代码恢复到一个历史的提交版本上。而这个历史提交版本，离最新的提交已经比较久远了。&lt;/p&gt;
&lt;p&gt;比如，
    
    </summary>
    
    
      <category term="Git" scheme="http://blog.devtang.com/tags/Git/"/>
    
  </entry>
  
</feed>
